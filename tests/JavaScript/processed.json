{
    "scope": [
        "source.js "
    ],
    "contexts": {
        "comments": {
            "name": "comments",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "/\\*\\*(?!/)",
                    "captures": [
                        [
                            "punctuation.definition.comment.begin.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "comments:0"
                    ]
                },
                {
                    "match": "/\\*",
                    "captures": [
                        [
                            "punctuation.definition.comment.begin.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "comments:1"
                    ]
                },
                {
                    "match": "//",
                    "captures": [
                        [
                            "punctuation.definition.comment.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "comments:2"
                    ]
                }
            ],
            "patterns": [
                "/\\*\\*(?!/)",
                "/\\*",
                "//"
            ]
        },
        "comments-top-level": {
            "name": "comments-top-level",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "^(#!).*$\\n?",
                    "captures": [
                        [
                            "comment.line.shebang.js "
                        ],
                        [
                            "punctuation.definition.comment.js "
                        ]
                    ],
                    "pop": false
                }
            ],
            "patterns": [
                "^(#!).*$\\n?"
            ]
        },
        "statements": {
            "name": "statements",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\)|\\}|\\]",
                    "captures": [
                        [
                            "invalid.illegal.stray-bracket-end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "statement"
                    ]
                }
            ],
            "patterns": [
                "\\)|\\}|\\]",
                "(?=\\S)"
            ]
        },
        "main": {
            "name": "main",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "/\\*\\*(?!/)",
                    "captures": [
                        [
                            "punctuation.definition.comment.begin.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "comments:0"
                    ]
                },
                {
                    "match": "/\\*",
                    "captures": [
                        [
                            "punctuation.definition.comment.begin.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "comments:1"
                    ]
                },
                {
                    "match": "//",
                    "captures": [
                        [
                            "punctuation.definition.comment.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "comments:2"
                    ]
                },
                {
                    "match": "^(#!).*$\\n?",
                    "captures": [
                        [
                            "comment.line.shebang.js "
                        ],
                        [
                            "punctuation.definition.comment.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\)|\\}|\\]",
                    "captures": [
                        [
                            "invalid.illegal.stray-bracket-end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "statement"
                    ]
                }
            ],
            "patterns": [
                "/\\*\\*(?!/)",
                "/\\*",
                "//",
                "^(#!).*$\\n?",
                "\\)|\\}|\\]",
                "(?=\\S)"
            ]
        },
        "prototype": {
            "name": "prototype",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "/\\*\\*(?!/)",
                    "captures": [
                        [
                            "punctuation.definition.comment.begin.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "comments:0"
                    ]
                },
                {
                    "match": "/\\*",
                    "captures": [
                        [
                            "punctuation.definition.comment.begin.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "comments:1"
                    ]
                },
                {
                    "match": "//",
                    "captures": [
                        [
                            "punctuation.definition.comment.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "comments:2"
                    ]
                }
            ],
            "patterns": [
                "/\\*\\*(?!/)",
                "/\\*",
                "//"
            ]
        },
        "comments:0": {
            "name": "comments:0",
            "meta_scope": [
                "comment.block.documentation.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\*/",
                    "captures": [
                        [
                            "punctuation.definition.comment.end.js "
                        ]
                    ],
                    "pop": "true"
                }
            ],
            "meta_include_prototype": "false",
            "patterns": [
                "\\*/"
            ]
        },
        "comments:1": {
            "name": "comments:1",
            "meta_scope": [
                "comment.block.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\*/",
                    "captures": [
                        [
                            "punctuation.definition.comment.end.js "
                        ]
                    ],
                    "pop": "true"
                }
            ],
            "meta_include_prototype": "false",
            "patterns": [
                "\\*/"
            ]
        },
        "comments:2": {
            "name": "comments:2",
            "meta_scope": [
                "comment.line.double-slash.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\n",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "meta_include_prototype": "false",
            "patterns": [
                "\\n"
            ]
        },
        "else-pop": {
            "name": "else-pop",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(?=\\S)"
            ]
        },
        "immediately-pop": {
            "name": "immediately-pop",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ""
            ]
        },
        "comma-separator": {
            "name": "comma-separator",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": ",",
                    "captures": [
                        [
                            "punctuation.separator.comma.js "
                        ]
                    ],
                    "pop": false
                }
            ],
            "patterns": [
                ","
            ]
        },
        "import-export:0": {
            "name": "import-export:0",
            "meta_scope": [
                "meta.import.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=\\.)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "expression-statement-end",
                        "import-meta-expression-dot"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "import-meta",
                        "expect-semicolon",
                        "import-string-or-items"
                    ]
                }
            ],
            "patterns": [
                "(?=\\.)",
                "(?=\\S)"
            ]
        },
        "import-export": {
            "name": "import-export",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "import(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?!\\s*\\.)",
                    "captures": [
                        [
                            "keyword.control.import-export.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "import-export:0"
                    ]
                },
                {
                    "match": "export(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.import-export.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "export-meta",
                        "export-extended"
                    ]
                }
            ],
            "patterns": [
                "import(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?!\\s*\\.)",
                "export(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])"
            ]
        },
        "import-meta": {
            "name": "import-meta",
            "meta_scope": [
                "meta.import.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ""
            ]
        },
        "import-export-alias:0": {
            "name": "import-export-alias:0",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "default(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.import-export.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.readwrite.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "default(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=\\S)"
            ]
        },
        "import-export-alias": {
            "name": "import-export-alias",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "as(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.import-export.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "import-export-alias:0"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "as(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=\\S)"
            ]
        },
        "import-export-from": {
            "name": "import-export-from",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "from(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.import-export.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "from(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=\\S)"
            ]
        },
        "literal-string": {
            "name": "literal-string",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "'",
                    "captures": [
                        [
                            "punctuation.definition.string.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string:0"
                    ]
                },
                {
                    "match": "\"",
                    "captures": [
                        [
                            "punctuation.definition.string.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string:1"
                    ]
                }
            ],
            "patterns": [
                "'",
                "\""
            ]
        },
        "import-string-or-items": {
            "name": "import-string-or-items",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "'",
                    "captures": [
                        [
                            "punctuation.definition.string.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string:0"
                    ]
                },
                {
                    "match": "\"",
                    "captures": [
                        [
                            "punctuation.definition.string.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string:1"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "import-export-from",
                        "import-list",
                        "import-export-alias",
                        "import-item"
                    ]
                }
            ],
            "patterns": [
                "'",
                "\"",
                "(?=\\S)"
            ]
        },
        "import-list": {
            "name": "import-list",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": ",",
                    "captures": [
                        [
                            "punctuation.separator.comma.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "import-export-alias",
                        "import-item"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ",",
                "(?=\\S)"
            ]
        },
        "import-item": {
            "name": "import-item",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\{",
                    "captures": [
                        [
                            "punctuation.section.block.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "import-brace"
                    ]
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.readwrite.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\*",
                    "captures": [
                        [
                            "constant.other.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\{",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "\\*",
                "(?=\\S)"
            ]
        },
        "import-brace": {
            "name": "import-brace",
            "meta_scope": [
                "meta.block.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": ",",
                    "captures": [
                        [
                            "punctuation.separator.comma.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\}",
                    "captures": [
                        [
                            "punctuation.section.block.end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.readwrite.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "import-export-alias"
                    ]
                },
                {
                    "match": "\\*",
                    "captures": [
                        [
                            "constant.other.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "import-export-alias"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ",",
                "\\}",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "\\*",
                "(?=\\S)"
            ]
        },
        "export-meta": {
            "name": "export-meta",
            "meta_scope": [
                "meta.export.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ""
            ]
        },
        "function-or-class-declaration": {
            "name": "function-or-class-declaration",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=class(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "class"
                    ]
                },
                {
                    "match": "(?=\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "function-declaration"
                    ]
                }
            ],
            "patterns": [
                "(?=class(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                "(?=\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))"
            ]
        },
        "export-extended:0": {
            "name": "export-extended:0",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=class(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "class"
                    ]
                },
                {
                    "match": "(?=\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "function-declaration"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "expression-statement"
                    ]
                }
            ],
            "patterns": [
                "(?=class(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                "(?=\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                "(?=\\S)"
            ]
        },
        "variable-declaration": {
            "name": "variable-declaration",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?:const|let|var)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "storage.type.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "expect-semicolon",
                        "variable-binding-list-top",
                        "variable-binding-top"
                    ]
                }
            ],
            "patterns": [
                "(?:const|let|var)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])"
            ]
        },
        "export-extended": {
            "name": "export-extended",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?:const|let|var)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "storage.type.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "expect-semicolon",
                        "variable-binding-list-top",
                        "variable-binding-top"
                    ]
                },
                {
                    "match": "(?=class(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "class"
                    ]
                },
                {
                    "match": "(?=\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "function-declaration"
                    ]
                },
                {
                    "match": "default(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.import-export.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "export-extended:0"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "expect-semicolon",
                        "import-export-from",
                        "export-list",
                        "import-export-alias",
                        "export-item"
                    ]
                }
            ],
            "patterns": [
                "(?:const|let|var)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=class(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                "(?=\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                "default(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=\\S)"
            ]
        },
        "export-list": {
            "name": "export-list",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": ",",
                    "captures": [
                        [
                            "punctuation.separator.comma.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "import-export-alias",
                        "export-item"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ",",
                "(?=\\S)"
            ]
        },
        "export-item": {
            "name": "export-item",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\{",
                    "captures": [
                        [
                            "punctuation.section.block.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "export-brace"
                    ]
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.readwrite.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\*",
                    "captures": [
                        [
                            "constant.other.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\{",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "\\*",
                "(?=\\S)"
            ]
        },
        "export-brace": {
            "name": "export-brace",
            "meta_scope": [
                "meta.block.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": ",",
                    "captures": [
                        [
                            "punctuation.separator.comma.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\}",
                    "captures": [
                        [
                            "punctuation.section.block.end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.readwrite.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "import-export-alias"
                    ]
                },
                {
                    "match": "\\*",
                    "captures": [
                        [
                            "constant.other.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "import-export-alias"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ",",
                "\\}",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "\\*",
                "(?=\\S)"
            ]
        },
        "conditional": {
            "name": "conditional",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "switch(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.switch.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "switch-meta",
                        "switch-block",
                        "parenthesized-expression"
                    ]
                },
                {
                    "match": "do(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.loop.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "do-while-meta",
                        "do-while-condition",
                        "block-scope"
                    ]
                },
                {
                    "match": "for(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.loop.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "for-meta",
                        "block-scope",
                        "for-condition",
                        "for-await"
                    ]
                },
                {
                    "match": "while(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.loop.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "while-meta",
                        "block-scope",
                        "parenthesized-expression"
                    ]
                },
                {
                    "match": "with(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.with.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "with-meta",
                        "block-scope",
                        "parenthesized-expression"
                    ]
                },
                {
                    "match": "(?:else\\s+if|if)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.conditional.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "conditional-meta",
                        "block-scope",
                        "parenthesized-expression"
                    ]
                },
                {
                    "match": "else(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.conditional.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "conditional-meta",
                        "block-scope"
                    ]
                },
                {
                    "match": "try(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.trycatch.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "try-meta",
                        "block-scope"
                    ]
                },
                {
                    "match": "finally(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.trycatch.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "finally-meta",
                        "block-scope"
                    ]
                },
                {
                    "match": "catch(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.trycatch.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "catch-meta",
                        "block-scope",
                        "parenthesized-expression"
                    ]
                }
            ],
            "patterns": [
                "switch(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "do(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "for(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "while(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "with(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?:else\\s+if|if)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "else(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "try(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "finally(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "catch(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])"
            ]
        },
        "block": {
            "name": "block",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\{",
                    "captures": [
                        [
                            "punctuation.section.block.begin.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "block:0"
                    ]
                }
            ],
            "patterns": [
                "\\{"
            ]
        },
        "label": {
            "name": "label",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\\s*(:)",
                    "captures": [
                        null,
                        [
                            "entity.name.label.js "
                        ],
                        [
                            "punctuation.separator.js "
                        ]
                    ],
                    "pop": false
                }
            ],
            "patterns": [
                "([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\\s*(:)"
            ]
        },
        "decorator": {
            "name": "decorator",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "@",
                    "captures": [
                        [
                            "punctuation.definition.annotation.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "decorator-meta",
                        "decorator-expression-end",
                        "decorator-expression-begin"
                    ]
                }
            ],
            "patterns": [
                "@"
            ]
        },
        "statement": {
            "name": "statement",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\;",
                    "captures": [
                        [
                            "punctuation.terminator.statement.empty.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "import(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?!\\s*\\.)",
                    "captures": [
                        [
                            "keyword.control.import-export.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "import-export:0"
                    ]
                },
                {
                    "match": "export(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.import-export.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "export-meta",
                        "export-extended"
                    ]
                },
                {
                    "match": "switch(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.switch.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "switch-meta",
                        "switch-block",
                        "parenthesized-expression"
                    ]
                },
                {
                    "match": "do(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.loop.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "do-while-meta",
                        "do-while-condition",
                        "block-scope"
                    ]
                },
                {
                    "match": "for(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.loop.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "for-meta",
                        "block-scope",
                        "for-condition",
                        "for-await"
                    ]
                },
                {
                    "match": "while(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.loop.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "while-meta",
                        "block-scope",
                        "parenthesized-expression"
                    ]
                },
                {
                    "match": "with(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.with.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "with-meta",
                        "block-scope",
                        "parenthesized-expression"
                    ]
                },
                {
                    "match": "(?:else\\s+if|if)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.conditional.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "conditional-meta",
                        "block-scope",
                        "parenthesized-expression"
                    ]
                },
                {
                    "match": "else(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.conditional.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "conditional-meta",
                        "block-scope"
                    ]
                },
                {
                    "match": "try(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.trycatch.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "try-meta",
                        "block-scope"
                    ]
                },
                {
                    "match": "finally(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.trycatch.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "finally-meta",
                        "block-scope"
                    ]
                },
                {
                    "match": "catch(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.trycatch.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "catch-meta",
                        "block-scope",
                        "parenthesized-expression"
                    ]
                },
                {
                    "match": "\\{",
                    "captures": [
                        [
                            "punctuation.section.block.begin.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "block:0"
                    ]
                },
                {
                    "match": "([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\\s*(:)",
                    "captures": [
                        null,
                        [
                            "entity.name.label.js "
                        ],
                        [
                            "punctuation.separator.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(?:const|let|var)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "storage.type.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "expect-semicolon",
                        "variable-binding-list-top",
                        "variable-binding-top"
                    ]
                },
                {
                    "match": "throw(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.trycatch.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "restricted-production"
                    ]
                },
                {
                    "match": "(?:break|continue|goto)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.loop.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "expect-semicolon"
                    ]
                },
                {
                    "match": "return(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.flow.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "restricted-production"
                    ]
                },
                {
                    "match": "debugger(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.other.debugger.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "expect-semicolon"
                    ]
                },
                {
                    "match": "(?=class(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "class"
                    ]
                },
                {
                    "match": "(?=\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "function-declaration"
                    ]
                },
                {
                    "match": "@",
                    "captures": [
                        [
                            "punctuation.definition.annotation.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "decorator-meta",
                        "decorator-expression-end",
                        "decorator-expression-begin"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "expression-statement"
                    ]
                }
            ],
            "patterns": [
                "\\;",
                "import(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?!\\s*\\.)",
                "export(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "switch(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "do(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "for(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "while(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "with(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?:else\\s+if|if)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "else(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "try(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "finally(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "catch(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "\\{",
                "([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\\s*(:)",
                "(?:const|let|var)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "throw(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?:break|continue|goto)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "return(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "debugger(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=class(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                "(?=\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                "@",
                "(?=\\S)"
            ]
        },
        "expect-semicolon": {
            "name": "expect-semicolon",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\;",
                    "captures": [
                        [
                            "punctuation.terminator.statement.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\;",
                "(?=\\S)"
            ]
        },
        "block:0": {
            "name": "block:0",
            "meta_scope": [
                "meta.block.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\}",
                    "captures": [
                        [
                            "punctuation.section.block.end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\)|\\}|\\]",
                    "captures": [
                        [
                            "invalid.illegal.stray-bracket-end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "statement"
                    ]
                }
            ],
            "patterns": [
                "\\}",
                "\\)|\\}|\\]",
                "(?=\\S)"
            ]
        },
        "variable-binding-name": {
            "name": "variable-binding-name",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "variable-binding-name:0"
                    ]
                }
            ],
            "patterns": [
                "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))"
            ]
        },
        "variable-binding-array-destructuring": {
            "name": "variable-binding-array-destructuring",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\[",
                    "captures": [
                        [
                            "punctuation.section.brackets.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "variable-binding-array-destructuring:0"
                    ]
                }
            ],
            "patterns": [
                "\\["
            ]
        },
        "variable-binding-object-destructuring": {
            "name": "variable-binding-object-destructuring",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\{",
                    "captures": [
                        [
                            "punctuation.section.block.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "variable-binding-object-destructuring:0"
                    ]
                }
            ],
            "patterns": [
                "\\{"
            ]
        },
        "variable-binding-pattern": {
            "name": "variable-binding-pattern",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "variable-binding-name:0"
                    ]
                },
                {
                    "match": "\\[",
                    "captures": [
                        [
                            "punctuation.section.brackets.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "variable-binding-array-destructuring:0"
                    ]
                },
                {
                    "match": "\\{",
                    "captures": [
                        [
                            "punctuation.section.block.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "variable-binding-object-destructuring:0"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                "\\[",
                "\\{",
                "(?=\\S)"
            ]
        },
        "well-known-identifiers": {
            "name": "well-known-identifiers",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(Array|Boolean|Date|Function|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|WeakMap|XMLHttpRequest)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.builtin.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "((Eval|Range|Reference|Syntax|Type|URI)?Error)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.error.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(document|window|navigator)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.type.object.dom.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.node.js "
                        ]
                    ],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(Array|Boolean|Date|Function|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|WeakMap|XMLHttpRequest)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "((Eval|Range|Reference|Syntax|Type|URI)?Error)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(document|window|navigator)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])"
            ]
        },
        "language-identifiers": {
            "name": "language-identifiers",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "arguments(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.arguments.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "super(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.super.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "this(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.this.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "self(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.self.js "
                        ]
                    ],
                    "pop": "true"
                }
            ],
            "patterns": [
                "arguments(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "super(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "this(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "self(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])"
            ]
        },
        "dollar-identifiers": {
            "name": "dollar-identifiers",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.dollar.only.js ",
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.dollar.js "
                        ],
                        [
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])"
            ]
        },
        "support": {
            "name": "support",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?x)\n(\n  ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|\n  DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|\n  WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR\n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.constant.dom.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(assert|buffer|child_process|cluster|constants|crypto|dgram|dns|domain|events|fs|http|https|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|timers|tls|tty|url|util|vm|zlib)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.module.node.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(process)(?:(\\.)(arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions))?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        null,
                        [
                            "support.type.object.process.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.type.object.process.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(exports|module(?:(\\.)(exports|id|filename|loaded|parent|children))?)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        null,
                        [
                            "support.type.object.module.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.type.object.module.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(global|GLOBAL|root|__dirname|__filename)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.type.object.node.js "
                        ]
                    ],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(?x)\n(\n  ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|\n  DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|\n  WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR\n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(assert|buffer|child_process|cluster|constants|crypto|dgram|dns|domain|events|fs|http|https|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|timers|tls|tty|url|util|vm|zlib)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(process)(?:(\\.)(arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions))?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(exports|module(?:(\\.)(exports|id|filename|loaded|parent|children))?)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(global|GLOBAL|root|__dirname|__filename)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])"
            ]
        },
        "simple-identifiers": {
            "name": "simple-identifiers",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.constant.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.readwrite.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(#)([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [
                        null,
                        [
                            "punctuation.definition.variable.js "
                        ],
                        [
                            "variable.other.readwrite.js "
                        ]
                    ],
                    "pop": false
                }
            ],
            "patterns": [
                "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(#)([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))"
            ]
        },
        "literal-variable": {
            "name": "literal-variable",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(Array|Boolean|Date|Function|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|WeakMap|XMLHttpRequest)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.builtin.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "((Eval|Range|Reference|Syntax|Type|URI)?Error)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.error.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(document|window|navigator)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.type.object.dom.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.node.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "arguments(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.arguments.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "super(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.super.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "this(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.this.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "self(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.self.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.dollar.only.js ",
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.dollar.js "
                        ],
                        [
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?x)\n(\n  ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|\n  DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|\n  WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR\n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.constant.dom.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(assert|buffer|child_process|cluster|constants|crypto|dgram|dns|domain|events|fs|http|https|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|timers|tls|tty|url|util|vm|zlib)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.module.node.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(process)(?:(\\.)(arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions))?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        null,
                        [
                            "support.type.object.process.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.type.object.process.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(exports|module(?:(\\.)(exports|id|filename|loaded|parent|children))?)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        null,
                        [
                            "support.type.object.module.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.type.object.module.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(global|GLOBAL|root|__dirname|__filename)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.type.object.node.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*[\\[.])",
                    "captures": [
                        [
                            "support.class.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*[\\[.])",
                    "captures": [
                        [
                            "variable.other.object.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.constant.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.readwrite.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(#)([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [
                        null,
                        [
                            "punctuation.definition.variable.js "
                        ],
                        [
                            "variable.other.readwrite.js "
                        ]
                    ],
                    "pop": false
                }
            ],
            "patterns": [
                "(Array|Boolean|Date|Function|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|WeakMap|XMLHttpRequest)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "((Eval|Range|Reference|Syntax|Type|URI)?Error)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(document|window|navigator)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "arguments(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "super(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "this(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "self(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?x)\n(\n  ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|\n  DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|\n  WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR\n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(assert|buffer|child_process|cluster|constants|crypto|dgram|dns|domain|events|fs|http|https|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|timers|tls|tty|url|util|vm|zlib)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(process)(?:(\\.)(arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions))?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(exports|module(?:(\\.)(exports|id|filename|loaded|parent|children))?)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(global|GLOBAL|root|__dirname|__filename)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*[\\[.])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*[\\[.])",
                "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(#)([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))"
            ]
        },
        "variable-binding-name:0": {
            "name": "variable-binding-name:0",
            "meta_scope": [
                "meta.binding.name.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(Array|Boolean|Date|Function|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|WeakMap|XMLHttpRequest)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.builtin.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "((Eval|Range|Reference|Syntax|Type|URI)?Error)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.error.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(document|window|navigator)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.type.object.dom.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.node.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "arguments(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.arguments.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "super(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.super.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "this(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.this.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "self(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.self.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.dollar.only.js ",
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.dollar.js "
                        ],
                        [
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?x)\n(\n  ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|\n  DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|\n  WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR\n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.constant.dom.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(assert|buffer|child_process|cluster|constants|crypto|dgram|dns|domain|events|fs|http|https|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|timers|tls|tty|url|util|vm|zlib)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.module.node.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(process)(?:(\\.)(arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions))?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        null,
                        [
                            "support.type.object.process.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.type.object.process.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(exports|module(?:(\\.)(exports|id|filename|loaded|parent|children))?)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        null,
                        [
                            "support.type.object.module.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.type.object.module.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(global|GLOBAL|root|__dirname|__filename)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.type.object.node.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*[\\[.])",
                    "captures": [
                        [
                            "support.class.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*[\\[.])",
                    "captures": [
                        [
                            "variable.other.object.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.constant.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.readwrite.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(#)([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [
                        null,
                        [
                            "punctuation.definition.variable.js "
                        ],
                        [
                            "variable.other.readwrite.js "
                        ]
                    ],
                    "pop": false
                }
            ],
            "patterns": [
                "(Array|Boolean|Date|Function|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|WeakMap|XMLHttpRequest)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "((Eval|Range|Reference|Syntax|Type|URI)?Error)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(document|window|navigator)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "arguments(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "super(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "this(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "self(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?x)\n(\n  ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|\n  DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|\n  WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR\n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(assert|buffer|child_process|cluster|constants|crypto|dgram|dns|domain|events|fs|http|https|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|timers|tls|tty|url|util|vm|zlib)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(process)(?:(\\.)(arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions))?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(exports|module(?:(\\.)(exports|id|filename|loaded|parent|children))?)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(global|GLOBAL|root|__dirname|__filename)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*[\\[.])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*[\\[.])",
                "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(#)([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))"
            ]
        },
        "variable-binding-spread": {
            "name": "variable-binding-spread",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\.\\.\\.",
                    "captures": [
                        [
                            "keyword.operator.spread.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "variable-binding-pattern"
                    ]
                }
            ],
            "patterns": [
                "\\.\\.\\."
            ]
        },
        "variable-binding-list": {
            "name": "variable-binding-list",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": ",",
                    "captures": [
                        [
                            "punctuation.separator.comma.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(?=(?:[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\[|\\{))",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "initializer",
                        "variable-binding-pattern"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ",",
                "(?=(?:[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\[|\\{))",
                "(?=\\S)"
            ]
        },
        "variable-binding-array-destructuring:0": {
            "name": "variable-binding-array-destructuring:0",
            "meta_scope": [
                "meta.binding.destructuring.sequence.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\]",
                    "captures": [
                        [
                            "punctuation.section.brackets.end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\.\\.\\.",
                    "captures": [
                        [
                            "keyword.operator.spread.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "variable-binding-pattern"
                    ]
                },
                {
                    "match": ",",
                    "captures": [
                        [
                            "punctuation.separator.comma.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(?=(?:[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\[|\\{))",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "initializer",
                        "variable-binding-pattern"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\]",
                "\\.\\.\\.",
                ",",
                "(?=(?:[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\[|\\{))",
                "(?=\\S)"
            ]
        },
        "variable-binding-object-destructuring:0": {
            "name": "variable-binding-object-destructuring:0",
            "meta_scope": [
                "meta.binding.destructuring.mapping.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\}",
                    "captures": [
                        [
                            "punctuation.section.block.end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\.\\.\\.",
                    "captures": [
                        [
                            "keyword.operator.spread.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "variable-binding-pattern"
                    ]
                },
                {
                    "match": "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "initializer",
                        "variable-binding-object-alias",
                        "object-literal-meta-key",
                        "variable-binding-object-key"
                    ]
                },
                {
                    "match": ",",
                    "captures": [
                        [
                            "punctuation.separator.comma.js "
                        ]
                    ],
                    "pop": false
                }
            ],
            "patterns": [
                "\\}",
                "\\.\\.\\.",
                "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                ","
            ]
        },
        "variable-binding-object-alias": {
            "name": "variable-binding-object-alias",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": ":",
                    "captures": [
                        [
                            "punctuation.separator.key-value.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "variable-binding-pattern"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ":",
                "(?=\\S)"
            ]
        },
        "variable-binding-object-key": {
            "name": "variable-binding-object-key",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*:)",
                    "captures": [],
                    "pop": "true"
                },
                {
                    "match": "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "variable-binding-name:0"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*:)",
                "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                "(?=\\S)"
            ]
        },
        "variable-binding-top:0": {
            "name": "variable-binding-top:0",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?x) (?! \\+\\+ | -- ) (?=\n  != |\n  [ -+*/% ><= &|^ \\[( ;,.:? ]\n)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "variable-binding-top"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(?x) (?! \\+\\+ | -- ) (?=\n  != |\n  [ -+*/% ><= &|^ \\[( ;,.:? ]\n)",
                "(?=\\S)"
            ]
        },
        "function-assignment": {
            "name": "function-assignment",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?x)(?=\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]) \\s* \\. \\s*)*\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  \\s* = \\s*\n  (?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)\n)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "function-initializer",
                        "function-declaration-identifiers"
                    ]
                }
            ],
            "patterns": [
                "(?x)(?=\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]) \\s* \\. \\s*)*\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  \\s* = \\s*\n  (?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)\n)"
            ]
        },
        "variable-binding-top": {
            "name": "variable-binding-top",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?x)(?=\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]) \\s* \\. \\s*)*\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  \\s* = \\s*\n  (?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)\n)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "function-initializer",
                        "function-declaration-identifiers"
                    ]
                },
                {
                    "match": "(?=(?:[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\[|\\{))",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "initializer",
                        "variable-binding-pattern"
                    ]
                },
                {
                    "match": "\\n",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "variable-binding-top:0"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(?x)(?=\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]) \\s* \\. \\s*)*\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  \\s* = \\s*\n  (?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)\n)",
                "(?=(?:[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\[|\\{))",
                "\\n",
                "(?=\\S)"
            ]
        },
        "variable-binding-list-top": {
            "name": "variable-binding-list-top",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": ",",
                    "captures": [
                        [
                            "punctuation.separator.comma.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "variable-binding-top"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ",",
                "(?=\\S)"
            ]
        },
        "function-parameter-binding-name": {
            "name": "function-parameter-binding-name",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.binding.name.js ",
                            "variable.parameter.function.js "
                        ]
                    ],
                    "pop": false
                }
            ],
            "patterns": [
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])"
            ]
        },
        "function-parameter-binding-array-destructuring": {
            "name": "function-parameter-binding-array-destructuring",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\[",
                    "captures": [
                        [
                            "punctuation.section.brackets.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "function-parameter-binding-array-destructuring:0"
                    ]
                }
            ],
            "patterns": [
                "\\["
            ]
        },
        "function-parameter-binding-object-destructuring": {
            "name": "function-parameter-binding-object-destructuring",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\{",
                    "captures": [
                        [
                            "punctuation.section.block.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "function-parameter-binding-object-destructuring:0"
                    ]
                }
            ],
            "patterns": [
                "\\{"
            ]
        },
        "function-parameter-binding-pattern": {
            "name": "function-parameter-binding-pattern",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.binding.name.js ",
                            "variable.parameter.function.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\[",
                    "captures": [
                        [
                            "punctuation.section.brackets.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "function-parameter-binding-array-destructuring:0"
                    ]
                },
                {
                    "match": "\\{",
                    "captures": [
                        [
                            "punctuation.section.block.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "function-parameter-binding-object-destructuring:0"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "\\[",
                "\\{",
                "(?=\\S)"
            ]
        },
        "function-parameter-binding-spread": {
            "name": "function-parameter-binding-spread",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\.\\.\\.",
                    "captures": [
                        [
                            "keyword.operator.spread.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "function-parameter-binding-pattern"
                    ]
                }
            ],
            "patterns": [
                "\\.\\.\\."
            ]
        },
        "function-parameter-binding-list": {
            "name": "function-parameter-binding-list",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": ",",
                    "captures": [
                        [
                            "punctuation.separator.parameter.function.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\.\\.\\.",
                    "captures": [
                        [
                            "keyword.operator.spread.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "function-parameter-binding-pattern"
                    ]
                },
                {
                    "match": "(?=(?:[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\[|\\{))",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "initializer",
                        "function-parameter-binding-pattern"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ",",
                "\\.\\.\\.",
                "(?=(?:[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\[|\\{))",
                "(?=\\S)"
            ]
        },
        "function-parameter-binding-array-destructuring:0": {
            "name": "function-parameter-binding-array-destructuring:0",
            "meta_scope": [
                "meta.binding.destructuring.sequence.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\]",
                    "captures": [
                        [
                            "punctuation.section.brackets.end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": ",",
                    "captures": [
                        [
                            "punctuation.separator.parameter.function.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\.\\.\\.",
                    "captures": [
                        [
                            "keyword.operator.spread.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "function-parameter-binding-pattern"
                    ]
                },
                {
                    "match": "(?=(?:[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\[|\\{))",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "initializer",
                        "function-parameter-binding-pattern"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\]",
                ",",
                "\\.\\.\\.",
                "(?=(?:[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\[|\\{))",
                "(?=\\S)"
            ]
        },
        "function-parameter-binding-object-destructuring:0": {
            "name": "function-parameter-binding-object-destructuring:0",
            "meta_scope": [
                "meta.binding.destructuring.mapping.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": ",",
                    "captures": [
                        [
                            "punctuation.separator.parameter.function.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\}",
                    "captures": [
                        [
                            "punctuation.section.block.end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\.\\.\\.",
                    "captures": [
                        [
                            "keyword.operator.spread.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "function-parameter-binding-pattern"
                    ]
                },
                {
                    "match": "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "initializer",
                        "function-parameter-binding-object-alias",
                        "object-literal-meta-key",
                        "function-parameter-binding-object-key"
                    ]
                }
            ],
            "patterns": [
                ",",
                "\\}",
                "\\.\\.\\.",
                "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))"
            ]
        },
        "function-parameter-binding-object-alias": {
            "name": "function-parameter-binding-object-alias",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": ":",
                    "captures": [
                        [
                            "punctuation.separator.key-value.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "function-parameter-binding-pattern"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ":",
                "(?=\\S)"
            ]
        },
        "function-parameter-binding-object-key": {
            "name": "function-parameter-binding-object-key",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*:)",
                    "captures": [],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.binding.name.js ",
                            "variable.parameter.function.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*:)",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=\\S)"
            ]
        },
        "initializer": {
            "name": "initializer",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "=",
                    "captures": [
                        [
                            "keyword.operator.assignment.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "expression-no-comma"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "=",
                "(?=\\S)"
            ]
        },
        "expression-no-comma": {
            "name": "expression-no-comma",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "expression-end-no-comma",
                        "expression-begin"
                    ]
                }
            ],
            "patterns": [
                "(?=\\S)"
            ]
        },
        "function-initializer:0": {
            "name": "function-initializer:0",
            "meta_scope": [],
            "meta_content_scope": [
                "meta.function.declaration.js "
            ],
            "rules": [
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "expression-end-no-comma",
                        "expression-begin"
                    ]
                }
            ],
            "patterns": [
                "(?=\\S)"
            ]
        },
        "function-initializer": {
            "name": "function-initializer",
            "meta_scope": [
                "meta.function.declaration.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "=",
                    "captures": [
                        [
                            "keyword.operator.assignment.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "function-initializer:0"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "=",
                "(?=\\S)"
            ]
        },
        "expression-statement": {
            "name": "expression-statement",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "expect-semicolon",
                        "expression-statement-end",
                        "expression-begin"
                    ]
                }
            ],
            "patterns": [
                "(?=\\S)"
            ]
        },
        "expression-statement-end:0": {
            "name": "expression-statement-end:0",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?x) (?! \\+\\+ | -- ) (?=\n  != |\n  [ -+*/% ><= &|^ \\[( ;,.:? ]\n)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "expression-statement-end"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(?x) (?! \\+\\+ | -- ) (?=\n  != |\n  [ -+*/% ><= &|^ \\[( ;,.:? ]\n)",
                "(?=\\S)"
            ]
        },
        "postfix-operators": {
            "name": "postfix-operators",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "--",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\+\\+",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false
                }
            ],
            "patterns": [
                "--",
                "\\+\\+"
            ]
        },
        "binary-operators": {
            "name": "binary-operators",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "instanceof(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.operator.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "in(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.operator.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "&&|\\|\\|",
                    "captures": [
                        [
                            "keyword.operator.logical.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "=(?![=>])",
                    "captures": [
                        [
                            "keyword.operator.assignment.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "(?x)\n%=   | # assignment      right-to-left   both\n&=   | # assignment      right-to-left   both\n\\*=  | # assignment      right-to-left   both\n\\+=  | # assignment      right-to-left   both\n-=   | # assignment      right-to-left   both\n/=   | # assignment      right-to-left   both\n\\^=  | # assignment      right-to-left   both\n\\|=  | # assignment      right-to-left   both\n<<=  | # assignment      right-to-left   both\n>>=  | # assignment      right-to-left   both\n>>>=   # assignment      right-to-left   both",
                    "captures": [
                        [
                            "keyword.operator.assignment.augmented.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "(?x)\n<<   | # bitwise-shift   left-to-right   both\n>>>  | # bitwise-shift   left-to-right   both\n>>   | # bitwise-shift   left-to-right   both\n&    | # bitwise-and     left-to-right   both\n\\^   | # bitwise-xor     left-to-right   both\n\\|     # bitwise-or      left-to-right   both",
                    "captures": [
                        [
                            "keyword.operator.bitwise.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "(?x)\n<=   | # relational      left-to-right   both\n>=   | # relational      left-to-right   both\n<    | # relational      left-to-right   both\n>      # relational      left-to-right   both",
                    "captures": [
                        [
                            "keyword.operator.relational.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "(?x)\n===  | # equality        left-to-right   both\n!==  | # equality        left-to-right   both\n==   | # equality        left-to-right   both\n!=     # equality        left-to-right   both",
                    "captures": [
                        [
                            "keyword.operator.comparison.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "(?x)\n/    | # division        left-to-right   both\n%    | # modulus         left-to-right   both\n\\*   | # multiplication  left-to-right   both\n\\+   | # addition        left-to-right   both\n-      # subtraction     left-to-right   both",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": ",",
                    "captures": [
                        [
                            "punctuation.separator.comma.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                }
            ],
            "patterns": [
                "instanceof(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "in(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "&&|\\|\\|",
                "=(?![=>])",
                "(?x)\n%=   | # assignment      right-to-left   both\n&=   | # assignment      right-to-left   both\n\\*=  | # assignment      right-to-left   both\n\\+=  | # assignment      right-to-left   both\n-=   | # assignment      right-to-left   both\n/=   | # assignment      right-to-left   both\n\\^=  | # assignment      right-to-left   both\n\\|=  | # assignment      right-to-left   both\n<<=  | # assignment      right-to-left   both\n>>=  | # assignment      right-to-left   both\n>>>=   # assignment      right-to-left   both",
                "(?x)\n<<   | # bitwise-shift   left-to-right   both\n>>>  | # bitwise-shift   left-to-right   both\n>>   | # bitwise-shift   left-to-right   both\n&    | # bitwise-and     left-to-right   both\n\\^   | # bitwise-xor     left-to-right   both\n\\|     # bitwise-or      left-to-right   both",
                "(?x)\n<=   | # relational      left-to-right   both\n>=   | # relational      left-to-right   both\n<    | # relational      left-to-right   both\n>      # relational      left-to-right   both",
                "(?x)\n===  | # equality        left-to-right   both\n!==  | # equality        left-to-right   both\n==   | # equality        left-to-right   both\n!=     # equality        left-to-right   both",
                "(?x)\n/    | # division        left-to-right   both\n%    | # modulus         left-to-right   both\n\\*   | # multiplication  left-to-right   both\n\\+   | # addition        left-to-right   both\n-      # subtraction     left-to-right   both",
                ","
            ]
        },
        "ternary-operator": {
            "name": "ternary-operator",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\?",
                    "captures": [
                        [
                            "keyword.operator.ternary.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "ternary-operator-expect-colon",
                        "expression-no-comma"
                    ]
                }
            ],
            "patterns": [
                "\\?"
            ]
        },
        "expression-break": {
            "name": "expression-break",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=[;})\\]])",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(?=[;})\\]])"
            ]
        },
        "property-access": {
            "name": "property-access",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\[",
                    "captures": [
                        [
                            "punctuation.section.brackets.begin.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "property-access:0"
                    ]
                },
                {
                    "match": "\\.",
                    "captures": [
                        [
                            "punctuation.accessor.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "object-property"
                    ]
                }
            ],
            "patterns": [
                "\\[",
                "\\."
            ]
        },
        "literal-string-template": {
            "name": "literal-string-template",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "`",
                    "captures": [
                        [
                            "punctuation.definition.string.template.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string-template:0"
                    ]
                }
            ],
            "patterns": [
                "`"
            ]
        },
        "fallthrough": {
            "name": "fallthrough",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "=>",
                    "captures": [
                        [
                            "storage.type.function.arrow.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "arrow-function-expect-body"
                    ]
                }
            ],
            "patterns": [
                "=>"
            ]
        },
        "left-expression-end": {
            "name": "left-expression-end",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=[;})\\]])",
                    "captures": [],
                    "pop": "true"
                },
                {
                    "match": "\\[",
                    "captures": [
                        [
                            "punctuation.section.brackets.begin.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "property-access:0"
                    ]
                },
                {
                    "match": "\\.",
                    "captures": [
                        [
                            "punctuation.accessor.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "object-property"
                    ]
                },
                {
                    "match": "`",
                    "captures": [
                        [
                            "punctuation.definition.string.template.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string-template:0"
                    ]
                },
                {
                    "match": "(?=\\()",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "function-call-arguments"
                    ]
                },
                {
                    "match": "=>",
                    "captures": [
                        [
                            "storage.type.function.arrow.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "arrow-function-expect-body"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(?=[;})\\]])",
                "\\[",
                "\\.",
                "`",
                "(?=\\()",
                "=>",
                "(?=\\S)"
            ]
        },
        "expression-end": {
            "name": "expression-end",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "--",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\+\\+",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "instanceof(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.operator.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "in(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.operator.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "&&|\\|\\|",
                    "captures": [
                        [
                            "keyword.operator.logical.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "=(?![=>])",
                    "captures": [
                        [
                            "keyword.operator.assignment.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "(?x)\n%=   | # assignment      right-to-left   both\n&=   | # assignment      right-to-left   both\n\\*=  | # assignment      right-to-left   both\n\\+=  | # assignment      right-to-left   both\n-=   | # assignment      right-to-left   both\n/=   | # assignment      right-to-left   both\n\\^=  | # assignment      right-to-left   both\n\\|=  | # assignment      right-to-left   both\n<<=  | # assignment      right-to-left   both\n>>=  | # assignment      right-to-left   both\n>>>=   # assignment      right-to-left   both",
                    "captures": [
                        [
                            "keyword.operator.assignment.augmented.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "(?x)\n<<   | # bitwise-shift   left-to-right   both\n>>>  | # bitwise-shift   left-to-right   both\n>>   | # bitwise-shift   left-to-right   both\n&    | # bitwise-and     left-to-right   both\n\\^   | # bitwise-xor     left-to-right   both\n\\|     # bitwise-or      left-to-right   both",
                    "captures": [
                        [
                            "keyword.operator.bitwise.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "(?x)\n<=   | # relational      left-to-right   both\n>=   | # relational      left-to-right   both\n<    | # relational      left-to-right   both\n>      # relational      left-to-right   both",
                    "captures": [
                        [
                            "keyword.operator.relational.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "(?x)\n===  | # equality        left-to-right   both\n!==  | # equality        left-to-right   both\n==   | # equality        left-to-right   both\n!=     # equality        left-to-right   both",
                    "captures": [
                        [
                            "keyword.operator.comparison.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "(?x)\n/    | # division        left-to-right   both\n%    | # modulus         left-to-right   both\n\\*   | # multiplication  left-to-right   both\n\\+   | # addition        left-to-right   both\n-      # subtraction     left-to-right   both",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": ",",
                    "captures": [
                        [
                            "punctuation.separator.comma.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "\\?",
                    "captures": [
                        [
                            "keyword.operator.ternary.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "ternary-operator-expect-colon",
                        "expression-no-comma"
                    ]
                },
                {
                    "match": "(?=[;})\\]])",
                    "captures": [],
                    "pop": "true"
                },
                {
                    "match": "\\[",
                    "captures": [
                        [
                            "punctuation.section.brackets.begin.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "property-access:0"
                    ]
                },
                {
                    "match": "\\.",
                    "captures": [
                        [
                            "punctuation.accessor.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "object-property"
                    ]
                },
                {
                    "match": "`",
                    "captures": [
                        [
                            "punctuation.definition.string.template.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string-template:0"
                    ]
                },
                {
                    "match": "(?=\\()",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "function-call-arguments"
                    ]
                },
                {
                    "match": "=>",
                    "captures": [
                        [
                            "storage.type.function.arrow.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "arrow-function-expect-body"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "--",
                "\\+\\+",
                "instanceof(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "in(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "&&|\\|\\|",
                "=(?![=>])",
                "(?x)\n%=   | # assignment      right-to-left   both\n&=   | # assignment      right-to-left   both\n\\*=  | # assignment      right-to-left   both\n\\+=  | # assignment      right-to-left   both\n-=   | # assignment      right-to-left   both\n/=   | # assignment      right-to-left   both\n\\^=  | # assignment      right-to-left   both\n\\|=  | # assignment      right-to-left   both\n<<=  | # assignment      right-to-left   both\n>>=  | # assignment      right-to-left   both\n>>>=   # assignment      right-to-left   both",
                "(?x)\n<<   | # bitwise-shift   left-to-right   both\n>>>  | # bitwise-shift   left-to-right   both\n>>   | # bitwise-shift   left-to-right   both\n&    | # bitwise-and     left-to-right   both\n\\^   | # bitwise-xor     left-to-right   both\n\\|     # bitwise-or      left-to-right   both",
                "(?x)\n<=   | # relational      left-to-right   both\n>=   | # relational      left-to-right   both\n<    | # relational      left-to-right   both\n>      # relational      left-to-right   both",
                "(?x)\n===  | # equality        left-to-right   both\n!==  | # equality        left-to-right   both\n==   | # equality        left-to-right   both\n!=     # equality        left-to-right   both",
                "(?x)\n/    | # division        left-to-right   both\n%    | # modulus         left-to-right   both\n\\*   | # multiplication  left-to-right   both\n\\+   | # addition        left-to-right   both\n-      # subtraction     left-to-right   both",
                ",",
                "\\?",
                "(?=[;})\\]])",
                "\\[",
                "\\.",
                "`",
                "(?=\\()",
                "=>",
                "(?=\\S)"
            ]
        },
        "expression-statement-end": {
            "name": "expression-statement-end",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\n",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "expression-statement-end:0"
                    ]
                },
                {
                    "match": "--",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\+\\+",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "instanceof(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.operator.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "in(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.operator.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "&&|\\|\\|",
                    "captures": [
                        [
                            "keyword.operator.logical.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "=(?![=>])",
                    "captures": [
                        [
                            "keyword.operator.assignment.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "(?x)\n%=   | # assignment      right-to-left   both\n&=   | # assignment      right-to-left   both\n\\*=  | # assignment      right-to-left   both\n\\+=  | # assignment      right-to-left   both\n-=   | # assignment      right-to-left   both\n/=   | # assignment      right-to-left   both\n\\^=  | # assignment      right-to-left   both\n\\|=  | # assignment      right-to-left   both\n<<=  | # assignment      right-to-left   both\n>>=  | # assignment      right-to-left   both\n>>>=   # assignment      right-to-left   both",
                    "captures": [
                        [
                            "keyword.operator.assignment.augmented.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "(?x)\n<<   | # bitwise-shift   left-to-right   both\n>>>  | # bitwise-shift   left-to-right   both\n>>   | # bitwise-shift   left-to-right   both\n&    | # bitwise-and     left-to-right   both\n\\^   | # bitwise-xor     left-to-right   both\n\\|     # bitwise-or      left-to-right   both",
                    "captures": [
                        [
                            "keyword.operator.bitwise.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "(?x)\n<=   | # relational      left-to-right   both\n>=   | # relational      left-to-right   both\n<    | # relational      left-to-right   both\n>      # relational      left-to-right   both",
                    "captures": [
                        [
                            "keyword.operator.relational.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "(?x)\n===  | # equality        left-to-right   both\n!==  | # equality        left-to-right   both\n==   | # equality        left-to-right   both\n!=     # equality        left-to-right   both",
                    "captures": [
                        [
                            "keyword.operator.comparison.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "(?x)\n/    | # division        left-to-right   both\n%    | # modulus         left-to-right   both\n\\*   | # multiplication  left-to-right   both\n\\+   | # addition        left-to-right   both\n-      # subtraction     left-to-right   both",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": ",",
                    "captures": [
                        [
                            "punctuation.separator.comma.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "\\?",
                    "captures": [
                        [
                            "keyword.operator.ternary.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "ternary-operator-expect-colon",
                        "expression-no-comma"
                    ]
                },
                {
                    "match": "(?=[;})\\]])",
                    "captures": [],
                    "pop": "true"
                },
                {
                    "match": "\\[",
                    "captures": [
                        [
                            "punctuation.section.brackets.begin.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "property-access:0"
                    ]
                },
                {
                    "match": "\\.",
                    "captures": [
                        [
                            "punctuation.accessor.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "object-property"
                    ]
                },
                {
                    "match": "`",
                    "captures": [
                        [
                            "punctuation.definition.string.template.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string-template:0"
                    ]
                },
                {
                    "match": "(?=\\()",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "function-call-arguments"
                    ]
                },
                {
                    "match": "=>",
                    "captures": [
                        [
                            "storage.type.function.arrow.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "arrow-function-expect-body"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\n",
                "--",
                "\\+\\+",
                "instanceof(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "in(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "&&|\\|\\|",
                "=(?![=>])",
                "(?x)\n%=   | # assignment      right-to-left   both\n&=   | # assignment      right-to-left   both\n\\*=  | # assignment      right-to-left   both\n\\+=  | # assignment      right-to-left   both\n-=   | # assignment      right-to-left   both\n/=   | # assignment      right-to-left   both\n\\^=  | # assignment      right-to-left   both\n\\|=  | # assignment      right-to-left   both\n<<=  | # assignment      right-to-left   both\n>>=  | # assignment      right-to-left   both\n>>>=   # assignment      right-to-left   both",
                "(?x)\n<<   | # bitwise-shift   left-to-right   both\n>>>  | # bitwise-shift   left-to-right   both\n>>   | # bitwise-shift   left-to-right   both\n&    | # bitwise-and     left-to-right   both\n\\^   | # bitwise-xor     left-to-right   both\n\\|     # bitwise-or      left-to-right   both",
                "(?x)\n<=   | # relational      left-to-right   both\n>=   | # relational      left-to-right   both\n<    | # relational      left-to-right   both\n>      # relational      left-to-right   both",
                "(?x)\n===  | # equality        left-to-right   both\n!==  | # equality        left-to-right   both\n==   | # equality        left-to-right   both\n!=     # equality        left-to-right   both",
                "(?x)\n/    | # division        left-to-right   both\n%    | # modulus         left-to-right   both\n\\*   | # multiplication  left-to-right   both\n\\+   | # addition        left-to-right   both\n-      # subtraction     left-to-right   both",
                ",",
                "\\?",
                "(?=[;})\\]])",
                "\\[",
                "\\.",
                "`",
                "(?=\\()",
                "=>",
                "(?=\\S)"
            ]
        },
        "restricted-production": {
            "name": "restricted-production",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\n",
                    "captures": [],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "expression-statement"
                    ]
                }
            ],
            "patterns": [
                "\\n",
                "(?=\\S)"
            ]
        },
        "expect-case-colon": {
            "name": "expect-case-colon",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": ":",
                    "captures": [
                        [
                            "punctuation.separator.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ":",
                "(?=\\S)"
            ]
        },
        "switch-meta": {
            "name": "switch-meta",
            "meta_scope": [
                "meta.switch.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ""
            ]
        },
        "do-while-meta": {
            "name": "do-while-meta",
            "meta_scope": [
                "meta.do-while.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ""
            ]
        },
        "for-meta": {
            "name": "for-meta",
            "meta_scope": [
                "meta.for.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ""
            ]
        },
        "while-meta": {
            "name": "while-meta",
            "meta_scope": [
                "meta.while.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ""
            ]
        },
        "with-meta": {
            "name": "with-meta",
            "meta_scope": [
                "meta.with.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ""
            ]
        },
        "conditional-meta": {
            "name": "conditional-meta",
            "meta_scope": [
                "meta.conditional.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ""
            ]
        },
        "try-meta": {
            "name": "try-meta",
            "meta_scope": [
                "meta.try.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ""
            ]
        },
        "finally-meta": {
            "name": "finally-meta",
            "meta_scope": [
                "meta.finally.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ""
            ]
        },
        "catch-meta": {
            "name": "catch-meta",
            "meta_scope": [
                "meta.catch.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ""
            ]
        },
        "for-await": {
            "name": "for-await",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "await(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.loop.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "await(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=\\S)"
            ]
        },
        "for-condition": {
            "name": "for-condition",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\(",
                    "captures": [
                        [
                            "punctuation.section.group.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "for-condition-end",
                        "for-condition-contents"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\(",
                "(?=\\S)"
            ]
        },
        "for-condition-end": {
            "name": "for-condition-end",
            "meta_scope": [
                "meta.group.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\)",
                    "captures": [
                        [
                            "punctuation.section.group.js "
                        ]
                    ],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\)"
            ]
        },
        "for-condition-contents:0": {
            "name": "for-condition-contents:0",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?:of|in)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.operator.word.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "expression"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "statements-in-parens",
                        "variable-binding-list",
                        "initializer"
                    ]
                }
            ],
            "patterns": [
                "(?:of|in)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=\\S)"
            ]
        },
        "for-condition-contents": {
            "name": "for-condition-contents",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?:const|let|var)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "storage.type.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "for-condition-contents:0",
                        "variable-binding-pattern"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "statements-in-parens"
                    ]
                }
            ],
            "patterns": [
                "(?:const|let|var)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=\\S)"
            ]
        },
        "statements-in-parens": {
            "name": "statements-in-parens",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=\\))",
                    "captures": [],
                    "pop": "true"
                },
                {
                    "match": "\\)|\\}|\\]",
                    "captures": [
                        [
                            "invalid.illegal.stray-bracket-end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "statement"
                    ]
                }
            ],
            "patterns": [
                "(?=\\))",
                "\\)|\\}|\\]",
                "(?=\\S)"
            ]
        },
        "block-scope": {
            "name": "block-scope",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\{",
                    "captures": [
                        [
                            "punctuation.section.block.begin.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "block:0"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\{",
                "(?=\\S)"
            ]
        },
        "block-meta": {
            "name": "block-meta",
            "meta_scope": [
                "meta.block.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ""
            ]
        },
        "switch-block": {
            "name": "switch-block",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\{",
                    "captures": [
                        [
                            "punctuation.section.block.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "switch-block-contents"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\{",
                "(?=\\S)"
            ]
        },
        "switch-block-contents": {
            "name": "switch-block-contents",
            "meta_scope": [
                "meta.block.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\}",
                    "captures": [
                        [
                            "punctuation.section.block.end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "case(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.switch.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expect-case-colon",
                        "expression"
                    ]
                },
                {
                    "match": "default(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.switch.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expect-case-colon"
                    ]
                },
                {
                    "match": "\\)|\\}|\\]",
                    "captures": [
                        [
                            "invalid.illegal.stray-bracket-end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "statement"
                    ]
                }
            ],
            "patterns": [
                "\\}",
                "case(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "default(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "\\)|\\}|\\]",
                "(?=\\S)"
            ]
        },
        "do-while-condition": {
            "name": "do-while-condition",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "while(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.loop.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "parenthesized-expression"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "while(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=\\S)"
            ]
        },
        "decorator-meta": {
            "name": "decorator-meta",
            "meta_scope": [
                "meta.annotation.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ""
            ]
        },
        "decorator-name": {
            "name": "decorator-name",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?!\\s*[.\\[\\(])",
                    "captures": [
                        [
                            "variable.annotation.js "
                        ]
                    ],
                    "pop": "true"
                }
            ],
            "patterns": [
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?!\\s*[.\\[\\(])"
            ]
        },
        "object-property": {
            "name": "object-property",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?x)(?=\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  \\s* = \\s*\n  (?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)\n)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "function-initializer",
                        "function-declaration-final-identifier"
                    ]
                },
                {
                    "match": "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "object-property:0"
                    ]
                },
                {
                    "match": "__proto__(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.proto.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "constructor(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.constructor.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "prototype(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.prototype.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.property.object.dollar.only.js ",
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.property.object.dollar.js "
                        ],
                        [
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(s(hape|ystemId|c(heme|ope|rolling)|ta(ndby|rt)|ize|ummary|pecified|e(ctionRowIndex|lected(Index)?)|rc)|h(space|t(tpEquiv|mlFor)|e(ight|aders)|ref(lang)?)|n(o(Resize|tation(s|Name)|Shade|Href|de(Name|Type|Value)|Wrap)|extSibling|ame)|c(h(ildNodes|Off|ecked|arset)?|ite|o(ntent|o(kie|rds)|de(Base|Type)?|l(s|Span|or)|mpact)|ell(s|Spacing|Padding)|l(ear|assName)|aption)|t(ype|Bodies|itle|Head|ext|a(rget|gName)|Foot)|i(sMap|ndex|d|m(plementation|ages))|o(ptions|wnerDocument|bject)|d(i(sabled|r)|o(c(type|umentElement)|main)|e(clare|f(er|ault(Selected|Checked|Value)))|at(eTime|a))|useMap|p(ublicId|arentNode|r(o(file|mpt)|eviousSibling))|e(n(ctype|tities)|vent|lements)|v(space|ersion|alue(Type)?|Link|Align)|URL|f(irstChild|orm(s)?|ace|rame(Border)?)|width|l(ink(s)?|o(ngDesc|wSrc)|a(stChild|ng|bel))|a(nchors|c(ce(ssKey|pt(Charset)?)|tion)|ttributes|pplets|l(t|ign)|r(chive|eas)|xis|Link|bbr)|r(ow(s|Span|Index)|ules|e(v|ferrer|l|adOnly))|m(ultiple|e(thod|dia)|a(rgin(Height|Width)|xLength))|b(o(dy|rder)|ackground|gColor))(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.constant.dom.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.property.object.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.illegal-identifier.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(?x)(?=\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  \\s* = \\s*\n  (?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)\n)",
                "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                "__proto__(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "constructor(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "prototype(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(s(hape|ystemId|c(heme|ope|rolling)|ta(ndby|rt)|ize|ummary|pecified|e(ctionRowIndex|lected(Index)?)|rc)|h(space|t(tpEquiv|mlFor)|e(ight|aders)|ref(lang)?)|n(o(Resize|tation(s|Name)|Shade|Href|de(Name|Type|Value)|Wrap)|extSibling|ame)|c(h(ildNodes|Off|ecked|arset)?|ite|o(ntent|o(kie|rds)|de(Base|Type)?|l(s|Span|or)|mpact)|ell(s|Spacing|Padding)|l(ear|assName)|aption)|t(ype|Bodies|itle|Head|ext|a(rget|gName)|Foot)|i(sMap|ndex|d|m(plementation|ages))|o(ptions|wnerDocument|bject)|d(i(sabled|r)|o(c(type|umentElement)|main)|e(clare|f(er|ault(Selected|Checked|Value)))|at(eTime|a))|useMap|p(ublicId|arentNode|r(o(file|mpt)|eviousSibling))|e(n(ctype|tities)|vent|lements)|v(space|ersion|alue(Type)?|Link|Align)|URL|f(irstChild|orm(s)?|ace|rame(Border)?)|width|l(ink(s)?|o(ngDesc|wSrc)|a(stChild|ng|bel))|a(nchors|c(ce(ssKey|pt(Charset)?)|tion)|ttributes|pplets|l(t|ign)|r(chive|eas)|xis|Link|bbr)|r(ow(s|Span|Index)|ules|e(v|ferrer|l|adOnly))|m(ultiple|e(thod|dia)|a(rgin(Height|Width)|xLength))|b(o(dy|rder)|ackground|gColor))(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=\\S)"
            ]
        },
        "decorator-expression-end:0": {
            "name": "decorator-expression-end:0",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?!\\s*[.\\[\\(])",
                    "captures": [
                        [
                            "variable.annotation.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?x)(?=\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  \\s* = \\s*\n  (?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)\n)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "function-initializer",
                        "function-declaration-final-identifier"
                    ]
                },
                {
                    "match": "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "object-property:0"
                    ]
                },
                {
                    "match": "__proto__(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.proto.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "constructor(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.constructor.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "prototype(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.prototype.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.property.object.dollar.only.js ",
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.property.object.dollar.js "
                        ],
                        [
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(s(hape|ystemId|c(heme|ope|rolling)|ta(ndby|rt)|ize|ummary|pecified|e(ctionRowIndex|lected(Index)?)|rc)|h(space|t(tpEquiv|mlFor)|e(ight|aders)|ref(lang)?)|n(o(Resize|tation(s|Name)|Shade|Href|de(Name|Type|Value)|Wrap)|extSibling|ame)|c(h(ildNodes|Off|ecked|arset)?|ite|o(ntent|o(kie|rds)|de(Base|Type)?|l(s|Span|or)|mpact)|ell(s|Spacing|Padding)|l(ear|assName)|aption)|t(ype|Bodies|itle|Head|ext|a(rget|gName)|Foot)|i(sMap|ndex|d|m(plementation|ages))|o(ptions|wnerDocument|bject)|d(i(sabled|r)|o(c(type|umentElement)|main)|e(clare|f(er|ault(Selected|Checked|Value)))|at(eTime|a))|useMap|p(ublicId|arentNode|r(o(file|mpt)|eviousSibling))|e(n(ctype|tities)|vent|lements)|v(space|ersion|alue(Type)?|Link|Align)|URL|f(irstChild|orm(s)?|ace|rame(Border)?)|width|l(ink(s)?|o(ngDesc|wSrc)|a(stChild|ng|bel))|a(nchors|c(ce(ssKey|pt(Charset)?)|tion)|ttributes|pplets|l(t|ign)|r(chive|eas)|xis|Link|bbr)|r(ow(s|Span|Index)|ules|e(v|ferrer|l|adOnly))|m(ultiple|e(thod|dia)|a(rgin(Height|Width)|xLength))|b(o(dy|rder)|ackground|gColor))(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.constant.dom.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.property.object.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.illegal-identifier.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?!\\s*[.\\[\\(])",
                "(?x)(?=\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  \\s* = \\s*\n  (?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)\n)",
                "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                "__proto__(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "constructor(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "prototype(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(s(hape|ystemId|c(heme|ope|rolling)|ta(ndby|rt)|ize|ummary|pecified|e(ctionRowIndex|lected(Index)?)|rc)|h(space|t(tpEquiv|mlFor)|e(ight|aders)|ref(lang)?)|n(o(Resize|tation(s|Name)|Shade|Href|de(Name|Type|Value)|Wrap)|extSibling|ame)|c(h(ildNodes|Off|ecked|arset)?|ite|o(ntent|o(kie|rds)|de(Base|Type)?|l(s|Span|or)|mpact)|ell(s|Spacing|Padding)|l(ear|assName)|aption)|t(ype|Bodies|itle|Head|ext|a(rget|gName)|Foot)|i(sMap|ndex|d|m(plementation|ages))|o(ptions|wnerDocument|bject)|d(i(sabled|r)|o(c(type|umentElement)|main)|e(clare|f(er|ault(Selected|Checked|Value)))|at(eTime|a))|useMap|p(ublicId|arentNode|r(o(file|mpt)|eviousSibling))|e(n(ctype|tities)|vent|lements)|v(space|ersion|alue(Type)?|Link|Align)|URL|f(irstChild|orm(s)?|ace|rame(Border)?)|width|l(ink(s)?|o(ngDesc|wSrc)|a(stChild|ng|bel))|a(nchors|c(ce(ssKey|pt(Charset)?)|tion)|ttributes|pplets|l(t|ign)|r(chive|eas)|xis|Link|bbr)|r(ow(s|Span|Index)|ules|e(v|ferrer|l|adOnly))|m(ultiple|e(thod|dia)|a(rgin(Height|Width)|xLength))|b(o(dy|rder)|ackground|gColor))(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=\\S)"
            ]
        },
        "decorator-expression-end": {
            "name": "decorator-expression-end",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\.",
                    "captures": [
                        [
                            "punctuation.accessor.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "decorator-expression-end:0"
                    ]
                },
                {
                    "match": "(?=[;})\\]])",
                    "captures": [],
                    "pop": "true"
                },
                {
                    "match": "\\[",
                    "captures": [
                        [
                            "punctuation.section.brackets.begin.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "property-access:0"
                    ]
                },
                {
                    "match": "\\.",
                    "captures": [
                        [
                            "punctuation.accessor.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "object-property"
                    ]
                },
                {
                    "match": "`",
                    "captures": [
                        [
                            "punctuation.definition.string.template.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string-template:0"
                    ]
                },
                {
                    "match": "(?=\\()",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "function-call-arguments"
                    ]
                },
                {
                    "match": "=>",
                    "captures": [
                        [
                            "storage.type.function.arrow.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "arrow-function-expect-body"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\.",
                "(?=[;})\\]])",
                "\\[",
                "\\.",
                "`",
                "(?=\\()",
                "=>",
                "(?=\\S)"
            ]
        },
        "literal-prototype": {
            "name": "literal-prototype",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?x)\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\n  \\s*(\\.)\\s*\n  (prototype)\n  (?=\\s*=\\s*(?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>))",
                    "captures": [
                        [
                            "meta.prototype.declaration.js "
                        ],
                        [
                            "support.class.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.constant.prototype.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "function-initializer"
                    ]
                },
                {
                    "match": "(?x)\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\n  \\s*(\\.)\\s*\n  (prototype)\\s*(\\.)\\s*\n  (?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*=\\s*(?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>))",
                    "captures": [
                        null,
                        [
                            "support.class.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.constant.prototype.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "function-initializer",
                        "function-declaration-single-identifier"
                    ]
                },
                {
                    "match": "([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))(\\.)(prototype)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.prototype.access.js "
                        ],
                        [
                            "support.class.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.constant.prototype.js "
                        ]
                    ],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(?x)\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\n  \\s*(\\.)\\s*\n  (prototype)\n  (?=\\s*=\\s*(?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>))",
                "(?x)\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\n  \\s*(\\.)\\s*\n  (prototype)\\s*(\\.)\\s*\n  (?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*=\\s*(?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>))",
                "([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))(\\.)(prototype)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])"
            ]
        },
        "regexp-complete": {
            "name": "regexp-complete",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "/",
                    "captures": [
                        [
                            "punctuation.definition.string.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "regexp"
                    ]
                }
            ],
            "patterns": [
                "/"
            ]
        },
        "tagged-template": {
            "name": "tagged-template",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*`)",
                    "captures": [
                        [
                            "variable.function.tagged-template.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "tagged-template:0"
                    ]
                }
            ],
            "patterns": [
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*`)"
            ]
        },
        "constructor": {
            "name": "constructor",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*\\.)",
                    "captures": [
                        [
                            "keyword.operator.word.new.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "new-target"
                    ]
                },
                {
                    "match": "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.operator.word.new.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "constructor:0"
                    ]
                }
            ],
            "patterns": [
                "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*\\.)",
                "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])"
            ]
        },
        "prefix-operators": {
            "name": "prefix-operators",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "~",
                    "captures": [
                        [
                            "keyword.operator.bitwise.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "!(?!=)",
                    "captures": [
                        [
                            "keyword.operator.logical.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "--",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\+\\+",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\.\\.\\.",
                    "captures": [
                        [
                            "keyword.operator.spread.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\+|\\-",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.operator.word.new.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(?:delete|typeof|void)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.operator.js "
                        ]
                    ],
                    "pop": false
                }
            ],
            "patterns": [
                "~",
                "!(?!=)",
                "--",
                "\\+\\+",
                "\\.\\.\\.",
                "\\+|\\-",
                "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?:delete|typeof|void)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])"
            ]
        },
        "yield-expression": {
            "name": "yield-expression",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "yield(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.flow.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "yield-expression:0"
                    ]
                }
            ],
            "patterns": [
                "yield(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])"
            ]
        },
        "await-expression": {
            "name": "await-expression",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "await(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.flow.js "
                        ]
                    ],
                    "pop": false
                }
            ],
            "patterns": [
                "await(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])"
            ]
        },
        "import-meta-expression": {
            "name": "import-meta-expression",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "import(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.import.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "import-meta-expression-dot"
                    ]
                }
            ],
            "patterns": [
                "import(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])"
            ]
        },
        "class": {
            "name": "class",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "class(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "storage.type.class.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "class-meta",
                        "class-body",
                        "class-extends",
                        "class-name"
                    ]
                }
            ],
            "patterns": [
                "class(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])"
            ]
        },
        "constants": {
            "name": "constants",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "true(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.boolean.true.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "false(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.boolean.false.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "null(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.null.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "undefined(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.undefined.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "NaN(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.nan.js "
                        ]
                    ],
                    "pop": "true"
                }
            ],
            "patterns": [
                "true(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "false(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "null(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "undefined(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "NaN(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])"
            ]
        },
        "either-function-declaration": {
            "name": "either-function-declaration",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "function-declaration"
                    ]
                },
                {
                    "match": "(?=\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "arrow-function-declaration"
                    ]
                }
            ],
            "patterns": [
                "(?=\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                "(?=\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)"
            ]
        },
        "object-literal": {
            "name": "object-literal",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\{",
                    "captures": [
                        [
                            "punctuation.section.block.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "object-literal-contents"
                    ]
                }
            ],
            "patterns": [
                "\\{"
            ]
        },
        "parenthesized-expression": {
            "name": "parenthesized-expression",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\(",
                    "captures": [
                        [
                            "punctuation.section.group.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "parenthesized-expression:0"
                    ]
                }
            ],
            "patterns": [
                "\\("
            ]
        },
        "array-literal": {
            "name": "array-literal",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\[",
                    "captures": [
                        [
                            "punctuation.section.brackets.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "array-literal:0"
                    ]
                }
            ],
            "patterns": [
                "\\["
            ]
        },
        "literal-number": {
            "name": "literal-number",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "[+-]?0[0-9]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.octal.js ",
                            "invalid.deprecated.numeric.octal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Xx])[0-9a-fA-F_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.hexadecimal.js "
                        ],
                        [
                            "punctuation.definition.numeric.hexadecimal.js "
                        ],
                        [
                            "storage.type.numeric.bigint.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Oo])[0-7_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.octal.js "
                        ],
                        [
                            "punctuation.definition.numeric.octal.js "
                        ],
                        [
                            "storage.type.numeric.bigint.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Bb])[0-1_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.binary.js "
                        ],
                        [
                            "punctuation.definition.numeric.binary.js "
                        ],
                        [
                            "storage.type.numeric.bigint.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(?:0|[1-9][0-9_]*)(n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.decimal.js "
                        ],
                        [
                            "storage.type.numeric.bigint.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?x)\n[-+]?\n(\n  (0|[1-9][0-9_]*)\n  (\\.[0-9_]*|(?!\\.))\n  |\n  \\.[0-9_]+\n)\n([Ee]([+-]|(?![-+]))[0-9_]*)?\n(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.decimal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(Infinity)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.infinity.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Xx])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.numeric.hexadecimal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Oo])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.numeric.octal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Bb])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.numeric.binary.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.numeric.octal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?([1-9])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?:\\.[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))?",
                    "captures": [
                        [
                            "invalid.illegal.numeric.decimal.js "
                        ]
                    ],
                    "pop": "true"
                }
            ],
            "patterns": [
                "[+-]?0[0-9]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Xx])[0-9a-fA-F_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Oo])[0-7_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Bb])[0-1_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(?:0|[1-9][0-9_]*)(n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?x)\n[-+]?\n(\n  (0|[1-9][0-9_]*)\n  (\\.[0-9_]*|(?!\\.))\n  |\n  \\.[0-9_]+\n)\n([Ee]([+-]|(?![-+]))[0-9_]*)?\n(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(Infinity)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Xx])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Oo])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Bb])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?([1-9])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?:\\.[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))?"
            ]
        },
        "literal-call": {
            "name": "literal-call",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "call-expression-meta",
                        "function-call-arguments",
                        "call-expression-function-name"
                    ]
                },
                {
                    "match": "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\.\\s*[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "literal-call:0"
                    ]
                }
            ],
            "patterns": [
                "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\.\\s*[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()"
            ]
        },
        "expression-begin": {
            "name": "expression-begin",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=[;})\\]])",
                    "captures": [],
                    "pop": "true"
                },
                {
                    "match": "(?x)\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\n  \\s*(\\.)\\s*\n  (prototype)\n  (?=\\s*=\\s*(?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>))",
                    "captures": [
                        [
                            "meta.prototype.declaration.js "
                        ],
                        [
                            "support.class.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.constant.prototype.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "function-initializer"
                    ]
                },
                {
                    "match": "(?x)\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\n  \\s*(\\.)\\s*\n  (prototype)\\s*(\\.)\\s*\n  (?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*=\\s*(?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>))",
                    "captures": [
                        null,
                        [
                            "support.class.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.constant.prototype.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "function-initializer",
                        "function-declaration-single-identifier"
                    ]
                },
                {
                    "match": "([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))(\\.)(prototype)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.prototype.access.js "
                        ],
                        [
                            "support.class.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.constant.prototype.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "/",
                    "captures": [
                        [
                            "punctuation.definition.string.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "regexp"
                    ]
                },
                {
                    "match": "'",
                    "captures": [
                        [
                            "punctuation.definition.string.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string:0"
                    ]
                },
                {
                    "match": "\"",
                    "captures": [
                        [
                            "punctuation.definition.string.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string:1"
                    ]
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*`)",
                    "captures": [
                        [
                            "variable.function.tagged-template.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "tagged-template:0"
                    ]
                },
                {
                    "match": "`",
                    "captures": [
                        [
                            "punctuation.definition.string.template.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string-template:0"
                    ]
                },
                {
                    "match": "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*\\.)",
                    "captures": [
                        [
                            "keyword.operator.word.new.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "new-target"
                    ]
                },
                {
                    "match": "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.operator.word.new.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "constructor:0"
                    ]
                },
                {
                    "match": "~",
                    "captures": [
                        [
                            "keyword.operator.bitwise.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "!(?!=)",
                    "captures": [
                        [
                            "keyword.operator.logical.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "--",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\+\\+",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\.\\.\\.",
                    "captures": [
                        [
                            "keyword.operator.spread.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\+|\\-",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.operator.word.new.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(?:delete|typeof|void)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.operator.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "yield(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.flow.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "yield-expression:0"
                    ]
                },
                {
                    "match": "await(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.flow.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "import(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.import.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "import-meta-expression-dot"
                    ]
                },
                {
                    "match": "class(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "storage.type.class.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "class-meta",
                        "class-body",
                        "class-extends",
                        "class-name"
                    ]
                },
                {
                    "match": "true(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.boolean.true.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "false(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.boolean.false.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "null(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.null.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "undefined(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.undefined.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "NaN(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.nan.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?x)(?=\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]) \\s* \\. \\s*)*\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  \\s* = \\s*\n  (?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)\n)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "function-initializer",
                        "function-declaration-identifiers"
                    ]
                },
                {
                    "match": "(?=\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "function-declaration"
                    ]
                },
                {
                    "match": "(?=\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "arrow-function-declaration"
                    ]
                },
                {
                    "match": "\\{",
                    "captures": [
                        [
                            "punctuation.section.block.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "object-literal-contents"
                    ]
                },
                {
                    "match": "\\(",
                    "captures": [
                        [
                            "punctuation.section.group.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "parenthesized-expression:0"
                    ]
                },
                {
                    "match": "\\[",
                    "captures": [
                        [
                            "punctuation.section.brackets.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "array-literal:0"
                    ]
                },
                {
                    "match": "[+-]?0[0-9]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.octal.js ",
                            "invalid.deprecated.numeric.octal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Xx])[0-9a-fA-F_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.hexadecimal.js "
                        ],
                        [
                            "punctuation.definition.numeric.hexadecimal.js "
                        ],
                        [
                            "storage.type.numeric.bigint.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Oo])[0-7_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.octal.js "
                        ],
                        [
                            "punctuation.definition.numeric.octal.js "
                        ],
                        [
                            "storage.type.numeric.bigint.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Bb])[0-1_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.binary.js "
                        ],
                        [
                            "punctuation.definition.numeric.binary.js "
                        ],
                        [
                            "storage.type.numeric.bigint.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(?:0|[1-9][0-9_]*)(n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.decimal.js "
                        ],
                        [
                            "storage.type.numeric.bigint.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?x)\n[-+]?\n(\n  (0|[1-9][0-9_]*)\n  (\\.[0-9_]*|(?!\\.))\n  |\n  \\.[0-9_]+\n)\n([Ee]([+-]|(?![-+]))[0-9_]*)?\n(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.decimal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(Infinity)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.infinity.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Xx])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.numeric.hexadecimal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Oo])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.numeric.octal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Bb])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.numeric.binary.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.numeric.octal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?([1-9])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?:\\.[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))?",
                    "captures": [
                        [
                            "invalid.illegal.numeric.decimal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "call-expression-meta",
                        "function-call-arguments",
                        "call-expression-function-name"
                    ]
                },
                {
                    "match": "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\.\\s*[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "literal-call:0"
                    ]
                },
                {
                    "match": "(Array|Boolean|Date|Function|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|WeakMap|XMLHttpRequest)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.builtin.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "((Eval|Range|Reference|Syntax|Type|URI)?Error)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.error.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(document|window|navigator)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.type.object.dom.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.node.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "arguments(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.arguments.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "super(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.super.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "this(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.this.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "self(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.self.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.dollar.only.js ",
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.dollar.js "
                        ],
                        [
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?x)\n(\n  ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|\n  DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|\n  WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR\n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.constant.dom.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(assert|buffer|child_process|cluster|constants|crypto|dgram|dns|domain|events|fs|http|https|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|timers|tls|tty|url|util|vm|zlib)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.module.node.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(process)(?:(\\.)(arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions))?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        null,
                        [
                            "support.type.object.process.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.type.object.process.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(exports|module(?:(\\.)(exports|id|filename|loaded|parent|children))?)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        null,
                        [
                            "support.type.object.module.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.type.object.module.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(global|GLOBAL|root|__dirname|__filename)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.type.object.node.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*[\\[.])",
                    "captures": [
                        [
                            "support.class.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*[\\[.])",
                    "captures": [
                        [
                            "variable.other.object.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.constant.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.readwrite.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(#)([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [
                        null,
                        [
                            "punctuation.definition.variable.js "
                        ],
                        [
                            "variable.other.readwrite.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(?=[;})\\]])",
                "(?x)\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\n  \\s*(\\.)\\s*\n  (prototype)\n  (?=\\s*=\\s*(?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>))",
                "(?x)\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\n  \\s*(\\.)\\s*\n  (prototype)\\s*(\\.)\\s*\n  (?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*=\\s*(?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>))",
                "([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))(\\.)(prototype)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "/",
                "'",
                "\"",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*`)",
                "`",
                "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*\\.)",
                "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "~",
                "!(?!=)",
                "--",
                "\\+\\+",
                "\\.\\.\\.",
                "\\+|\\-",
                "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?:delete|typeof|void)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "yield(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "await(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "import(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "class(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "true(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "false(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "null(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "undefined(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "NaN(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?x)(?=\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]) \\s* \\. \\s*)*\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  \\s* = \\s*\n  (?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)\n)",
                "(?=\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                "(?=\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)",
                "\\{",
                "\\(",
                "\\[",
                "[+-]?0[0-9]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Xx])[0-9a-fA-F_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Oo])[0-7_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Bb])[0-1_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(?:0|[1-9][0-9_]*)(n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?x)\n[-+]?\n(\n  (0|[1-9][0-9_]*)\n  (\\.[0-9_]*|(?!\\.))\n  |\n  \\.[0-9_]+\n)\n([Ee]([+-]|(?![-+]))[0-9_]*)?\n(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(Infinity)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Xx])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Oo])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Bb])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?([1-9])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?:\\.[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))?",
                "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\.\\s*[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                "(Array|Boolean|Date|Function|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|WeakMap|XMLHttpRequest)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "((Eval|Range|Reference|Syntax|Type|URI)?Error)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(document|window|navigator)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "arguments(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "super(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "this(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "self(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?x)\n(\n  ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|\n  DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|\n  WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR\n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(assert|buffer|child_process|cluster|constants|crypto|dgram|dns|domain|events|fs|http|https|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|timers|tls|tty|url|util|vm|zlib)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(process)(?:(\\.)(arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions))?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(exports|module(?:(\\.)(exports|id|filename|loaded|parent|children))?)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(global|GLOBAL|root|__dirname|__filename)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*[\\[.])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*[\\[.])",
                "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(#)([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                "(?=\\S)"
            ]
        },
        "decorator-expression-begin": {
            "name": "decorator-expression-begin",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?!\\s*[.\\[\\(])",
                    "captures": [
                        [
                            "variable.annotation.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=[;})\\]])",
                    "captures": [],
                    "pop": "true"
                },
                {
                    "match": "(?x)\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\n  \\s*(\\.)\\s*\n  (prototype)\n  (?=\\s*=\\s*(?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>))",
                    "captures": [
                        [
                            "meta.prototype.declaration.js "
                        ],
                        [
                            "support.class.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.constant.prototype.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "function-initializer"
                    ]
                },
                {
                    "match": "(?x)\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\n  \\s*(\\.)\\s*\n  (prototype)\\s*(\\.)\\s*\n  (?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*=\\s*(?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>))",
                    "captures": [
                        null,
                        [
                            "support.class.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.constant.prototype.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "function-initializer",
                        "function-declaration-single-identifier"
                    ]
                },
                {
                    "match": "([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))(\\.)(prototype)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.prototype.access.js "
                        ],
                        [
                            "support.class.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.constant.prototype.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "/",
                    "captures": [
                        [
                            "punctuation.definition.string.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "regexp"
                    ]
                },
                {
                    "match": "'",
                    "captures": [
                        [
                            "punctuation.definition.string.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string:0"
                    ]
                },
                {
                    "match": "\"",
                    "captures": [
                        [
                            "punctuation.definition.string.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string:1"
                    ]
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*`)",
                    "captures": [
                        [
                            "variable.function.tagged-template.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "tagged-template:0"
                    ]
                },
                {
                    "match": "`",
                    "captures": [
                        [
                            "punctuation.definition.string.template.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string-template:0"
                    ]
                },
                {
                    "match": "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*\\.)",
                    "captures": [
                        [
                            "keyword.operator.word.new.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "new-target"
                    ]
                },
                {
                    "match": "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.operator.word.new.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "constructor:0"
                    ]
                },
                {
                    "match": "~",
                    "captures": [
                        [
                            "keyword.operator.bitwise.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "!(?!=)",
                    "captures": [
                        [
                            "keyword.operator.logical.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "--",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\+\\+",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\.\\.\\.",
                    "captures": [
                        [
                            "keyword.operator.spread.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\+|\\-",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.operator.word.new.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(?:delete|typeof|void)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.operator.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "yield(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.flow.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "yield-expression:0"
                    ]
                },
                {
                    "match": "await(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.flow.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "import(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.import.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "import-meta-expression-dot"
                    ]
                },
                {
                    "match": "class(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "storage.type.class.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "class-meta",
                        "class-body",
                        "class-extends",
                        "class-name"
                    ]
                },
                {
                    "match": "true(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.boolean.true.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "false(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.boolean.false.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "null(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.null.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "undefined(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.undefined.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "NaN(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.nan.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?x)(?=\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]) \\s* \\. \\s*)*\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  \\s* = \\s*\n  (?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)\n)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "function-initializer",
                        "function-declaration-identifiers"
                    ]
                },
                {
                    "match": "(?=\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "function-declaration"
                    ]
                },
                {
                    "match": "(?=\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "arrow-function-declaration"
                    ]
                },
                {
                    "match": "\\{",
                    "captures": [
                        [
                            "punctuation.section.block.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "object-literal-contents"
                    ]
                },
                {
                    "match": "\\(",
                    "captures": [
                        [
                            "punctuation.section.group.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "parenthesized-expression:0"
                    ]
                },
                {
                    "match": "\\[",
                    "captures": [
                        [
                            "punctuation.section.brackets.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "array-literal:0"
                    ]
                },
                {
                    "match": "[+-]?0[0-9]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.octal.js ",
                            "invalid.deprecated.numeric.octal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Xx])[0-9a-fA-F_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.hexadecimal.js "
                        ],
                        [
                            "punctuation.definition.numeric.hexadecimal.js "
                        ],
                        [
                            "storage.type.numeric.bigint.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Oo])[0-7_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.octal.js "
                        ],
                        [
                            "punctuation.definition.numeric.octal.js "
                        ],
                        [
                            "storage.type.numeric.bigint.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Bb])[0-1_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.binary.js "
                        ],
                        [
                            "punctuation.definition.numeric.binary.js "
                        ],
                        [
                            "storage.type.numeric.bigint.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(?:0|[1-9][0-9_]*)(n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.decimal.js "
                        ],
                        [
                            "storage.type.numeric.bigint.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?x)\n[-+]?\n(\n  (0|[1-9][0-9_]*)\n  (\\.[0-9_]*|(?!\\.))\n  |\n  \\.[0-9_]+\n)\n([Ee]([+-]|(?![-+]))[0-9_]*)?\n(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.decimal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(Infinity)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.infinity.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Xx])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.numeric.hexadecimal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Oo])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.numeric.octal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Bb])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.numeric.binary.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.numeric.octal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?([1-9])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?:\\.[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))?",
                    "captures": [
                        [
                            "invalid.illegal.numeric.decimal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "call-expression-meta",
                        "function-call-arguments",
                        "call-expression-function-name"
                    ]
                },
                {
                    "match": "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\.\\s*[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "literal-call:0"
                    ]
                },
                {
                    "match": "(Array|Boolean|Date|Function|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|WeakMap|XMLHttpRequest)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.builtin.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "((Eval|Range|Reference|Syntax|Type|URI)?Error)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.error.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(document|window|navigator)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.type.object.dom.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.node.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "arguments(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.arguments.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "super(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.super.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "this(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.this.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "self(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.self.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.dollar.only.js ",
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.dollar.js "
                        ],
                        [
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?x)\n(\n  ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|\n  DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|\n  WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR\n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.constant.dom.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(assert|buffer|child_process|cluster|constants|crypto|dgram|dns|domain|events|fs|http|https|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|timers|tls|tty|url|util|vm|zlib)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.module.node.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(process)(?:(\\.)(arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions))?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        null,
                        [
                            "support.type.object.process.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.type.object.process.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(exports|module(?:(\\.)(exports|id|filename|loaded|parent|children))?)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        null,
                        [
                            "support.type.object.module.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.type.object.module.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(global|GLOBAL|root|__dirname|__filename)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.type.object.node.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*[\\[.])",
                    "captures": [
                        [
                            "support.class.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*[\\[.])",
                    "captures": [
                        [
                            "variable.other.object.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.constant.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.readwrite.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(#)([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [
                        null,
                        [
                            "punctuation.definition.variable.js "
                        ],
                        [
                            "variable.other.readwrite.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?!\\s*[.\\[\\(])",
                "(?=[;})\\]])",
                "(?x)\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\n  \\s*(\\.)\\s*\n  (prototype)\n  (?=\\s*=\\s*(?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>))",
                "(?x)\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\n  \\s*(\\.)\\s*\n  (prototype)\\s*(\\.)\\s*\n  (?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*=\\s*(?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>))",
                "([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))(\\.)(prototype)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "/",
                "'",
                "\"",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*`)",
                "`",
                "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*\\.)",
                "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "~",
                "!(?!=)",
                "--",
                "\\+\\+",
                "\\.\\.\\.",
                "\\+|\\-",
                "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?:delete|typeof|void)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "yield(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "await(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "import(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "class(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "true(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "false(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "null(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "undefined(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "NaN(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?x)(?=\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]) \\s* \\. \\s*)*\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  \\s* = \\s*\n  (?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)\n)",
                "(?=\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                "(?=\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)",
                "\\{",
                "\\(",
                "\\[",
                "[+-]?0[0-9]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Xx])[0-9a-fA-F_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Oo])[0-7_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Bb])[0-1_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(?:0|[1-9][0-9_]*)(n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?x)\n[-+]?\n(\n  (0|[1-9][0-9_]*)\n  (\\.[0-9_]*|(?!\\.))\n  |\n  \\.[0-9_]+\n)\n([Ee]([+-]|(?![-+]))[0-9_]*)?\n(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(Infinity)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Xx])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Oo])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Bb])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?([1-9])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?:\\.[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))?",
                "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\.\\s*[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                "(Array|Boolean|Date|Function|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|WeakMap|XMLHttpRequest)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "((Eval|Range|Reference|Syntax|Type|URI)?Error)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(document|window|navigator)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "arguments(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "super(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "this(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "self(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?x)\n(\n  ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|\n  DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|\n  WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR\n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(assert|buffer|child_process|cluster|constants|crypto|dgram|dns|domain|events|fs|http|https|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|timers|tls|tty|url|util|vm|zlib)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(process)(?:(\\.)(arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions))?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(exports|module(?:(\\.)(exports|id|filename|loaded|parent|children))?)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(global|GLOBAL|root|__dirname|__filename)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*[\\[.])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*[\\[.])",
                "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(#)([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                "(?=\\S)"
            ]
        },
        "expression": {
            "name": "expression",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "expression-end",
                        "expression-begin"
                    ]
                }
            ],
            "patterns": [
                "(?=\\S)"
            ]
        },
        "expression-list": {
            "name": "expression-list",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=[;})\\]])",
                    "captures": [],
                    "pop": "true"
                },
                {
                    "match": ",",
                    "captures": [
                        [
                            "punctuation.separator.comma.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "expression-no-comma"
                    ]
                }
            ],
            "patterns": [
                "(?=[;})\\]])",
                ",",
                "(?=\\S)"
            ]
        },
        "expression-end-no-comma": {
            "name": "expression-end-no-comma",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=,)",
                    "captures": [],
                    "pop": "true"
                },
                {
                    "match": "--",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\+\\+",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "instanceof(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.operator.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "in(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.operator.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "&&|\\|\\|",
                    "captures": [
                        [
                            "keyword.operator.logical.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "=(?![=>])",
                    "captures": [
                        [
                            "keyword.operator.assignment.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "(?x)\n%=   | # assignment      right-to-left   both\n&=   | # assignment      right-to-left   both\n\\*=  | # assignment      right-to-left   both\n\\+=  | # assignment      right-to-left   both\n-=   | # assignment      right-to-left   both\n/=   | # assignment      right-to-left   both\n\\^=  | # assignment      right-to-left   both\n\\|=  | # assignment      right-to-left   both\n<<=  | # assignment      right-to-left   both\n>>=  | # assignment      right-to-left   both\n>>>=   # assignment      right-to-left   both",
                    "captures": [
                        [
                            "keyword.operator.assignment.augmented.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "(?x)\n<<   | # bitwise-shift   left-to-right   both\n>>>  | # bitwise-shift   left-to-right   both\n>>   | # bitwise-shift   left-to-right   both\n&    | # bitwise-and     left-to-right   both\n\\^   | # bitwise-xor     left-to-right   both\n\\|     # bitwise-or      left-to-right   both",
                    "captures": [
                        [
                            "keyword.operator.bitwise.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "(?x)\n<=   | # relational      left-to-right   both\n>=   | # relational      left-to-right   both\n<    | # relational      left-to-right   both\n>      # relational      left-to-right   both",
                    "captures": [
                        [
                            "keyword.operator.relational.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "(?x)\n===  | # equality        left-to-right   both\n!==  | # equality        left-to-right   both\n==   | # equality        left-to-right   both\n!=     # equality        left-to-right   both",
                    "captures": [
                        [
                            "keyword.operator.comparison.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "(?x)\n/    | # division        left-to-right   both\n%    | # modulus         left-to-right   both\n\\*   | # multiplication  left-to-right   both\n\\+   | # addition        left-to-right   both\n-      # subtraction     left-to-right   both",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": ",",
                    "captures": [
                        [
                            "punctuation.separator.comma.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "\\?",
                    "captures": [
                        [
                            "keyword.operator.ternary.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "ternary-operator-expect-colon",
                        "expression-no-comma"
                    ]
                },
                {
                    "match": "(?=[;})\\]])",
                    "captures": [],
                    "pop": "true"
                },
                {
                    "match": "\\[",
                    "captures": [
                        [
                            "punctuation.section.brackets.begin.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "property-access:0"
                    ]
                },
                {
                    "match": "\\.",
                    "captures": [
                        [
                            "punctuation.accessor.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "object-property"
                    ]
                },
                {
                    "match": "`",
                    "captures": [
                        [
                            "punctuation.definition.string.template.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string-template:0"
                    ]
                },
                {
                    "match": "(?=\\()",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "function-call-arguments"
                    ]
                },
                {
                    "match": "=>",
                    "captures": [
                        [
                            "storage.type.function.arrow.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "arrow-function-expect-body"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(?=,)",
                "--",
                "\\+\\+",
                "instanceof(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "in(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "&&|\\|\\|",
                "=(?![=>])",
                "(?x)\n%=   | # assignment      right-to-left   both\n&=   | # assignment      right-to-left   both\n\\*=  | # assignment      right-to-left   both\n\\+=  | # assignment      right-to-left   both\n-=   | # assignment      right-to-left   both\n/=   | # assignment      right-to-left   both\n\\^=  | # assignment      right-to-left   both\n\\|=  | # assignment      right-to-left   both\n<<=  | # assignment      right-to-left   both\n>>=  | # assignment      right-to-left   both\n>>>=   # assignment      right-to-left   both",
                "(?x)\n<<   | # bitwise-shift   left-to-right   both\n>>>  | # bitwise-shift   left-to-right   both\n>>   | # bitwise-shift   left-to-right   both\n&    | # bitwise-and     left-to-right   both\n\\^   | # bitwise-xor     left-to-right   both\n\\|     # bitwise-or      left-to-right   both",
                "(?x)\n<=   | # relational      left-to-right   both\n>=   | # relational      left-to-right   both\n<    | # relational      left-to-right   both\n>      # relational      left-to-right   both",
                "(?x)\n===  | # equality        left-to-right   both\n!==  | # equality        left-to-right   both\n==   | # equality        left-to-right   both\n!=     # equality        left-to-right   both",
                "(?x)\n/    | # division        left-to-right   both\n%    | # modulus         left-to-right   both\n\\*   | # multiplication  left-to-right   both\n\\+   | # addition        left-to-right   both\n-      # subtraction     left-to-right   both",
                ",",
                "\\?",
                "(?=[;})\\]])",
                "\\[",
                "\\.",
                "`",
                "(?=\\()",
                "=>",
                "(?=\\S)"
            ]
        },
        "string-content": {
            "name": "string-content",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\\\\\s*\\n",
                    "captures": [
                        [
                            "constant.character.escape.newline.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\\\(x[\\da-fA-F][\\da-fA-F]|u[\\da-fA-F][\\da-fA-F][\\da-fA-F][\\da-fA-F]|.)",
                    "captures": [
                        [
                            "constant.character.escape.js "
                        ]
                    ],
                    "pop": false
                }
            ],
            "patterns": [
                "\\\\\\s*\\n",
                "\\\\(x[\\da-fA-F][\\da-fA-F]|u[\\da-fA-F][\\da-fA-F][\\da-fA-F][\\da-fA-F]|.)"
            ]
        },
        "literal-string:0": {
            "name": "literal-string:0",
            "meta_scope": [
                "string.quoted.single.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(')|(\\n)",
                    "captures": [
                        null,
                        [
                            "punctuation.definition.string.end.js "
                        ],
                        [
                            "invalid.illegal.newline.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\\\\\s*\\n",
                    "captures": [
                        [
                            "constant.character.escape.newline.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\\\(x[\\da-fA-F][\\da-fA-F]|u[\\da-fA-F][\\da-fA-F][\\da-fA-F][\\da-fA-F]|.)",
                    "captures": [
                        [
                            "constant.character.escape.js "
                        ]
                    ],
                    "pop": false
                }
            ],
            "meta_include_prototype": "false",
            "patterns": [
                "(')|(\\n)",
                "\\\\\\s*\\n",
                "\\\\(x[\\da-fA-F][\\da-fA-F]|u[\\da-fA-F][\\da-fA-F][\\da-fA-F][\\da-fA-F]|.)"
            ]
        },
        "literal-string:1": {
            "name": "literal-string:1",
            "meta_scope": [
                "string.quoted.double.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(\")|(\\n)",
                    "captures": [
                        null,
                        [
                            "punctuation.definition.string.end.js "
                        ],
                        [
                            "invalid.illegal.newline.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\\\\\s*\\n",
                    "captures": [
                        [
                            "constant.character.escape.newline.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\\\(x[\\da-fA-F][\\da-fA-F]|u[\\da-fA-F][\\da-fA-F][\\da-fA-F][\\da-fA-F]|.)",
                    "captures": [
                        [
                            "constant.character.escape.js "
                        ]
                    ],
                    "pop": false
                }
            ],
            "meta_include_prototype": "false",
            "patterns": [
                "(\")|(\\n)",
                "\\\\\\s*\\n",
                "\\\\(x[\\da-fA-F][\\da-fA-F]|u[\\da-fA-F][\\da-fA-F][\\da-fA-F][\\da-fA-F]|.)"
            ]
        },
        "tagged-template:0": {
            "name": "tagged-template:0",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "`",
                    "captures": [
                        [
                            "punctuation.definition.string.template.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string-template:0"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "`",
                "(?=\\S)"
            ]
        },
        "literal-string-template:0:0": {
            "name": "literal-string-template:0:0",
            "meta_scope": [
                "meta.template.expression.js "
            ],
            "meta_content_scope": [
                "source.js.embedded.expression "
            ],
            "rules": [
                {
                    "match": "\\}",
                    "captures": [
                        [
                            "punctuation.definition.template-expression.end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "expression"
                    ]
                }
            ],
            "clear_scopes": "1",
            "patterns": [
                "\\}",
                "(?=\\S)"
            ]
        },
        "literal-string-template:0": {
            "name": "literal-string-template:0",
            "meta_scope": [
                "string.template.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "`",
                    "captures": [
                        [
                            "punctuation.definition.string.template.end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\$\\{",
                    "captures": [
                        [
                            "punctuation.definition.template-expression.begin.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "literal-string-template:0:0"
                    ]
                },
                {
                    "match": "\\\\\\s*\\n",
                    "captures": [
                        [
                            "constant.character.escape.newline.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\\\(x[\\da-fA-F][\\da-fA-F]|u[\\da-fA-F][\\da-fA-F][\\da-fA-F][\\da-fA-F]|.)",
                    "captures": [
                        [
                            "constant.character.escape.js "
                        ]
                    ],
                    "pop": false
                }
            ],
            "meta_include_prototype": "false",
            "patterns": [
                "`",
                "\\$\\{",
                "\\\\\\s*\\n",
                "\\\\(x[\\da-fA-F][\\da-fA-F]|u[\\da-fA-F][\\da-fA-F][\\da-fA-F][\\da-fA-F]|.)"
            ]
        },
        "regexp:0": {
            "name": "regexp:0",
            "meta_scope": [],
            "meta_content_scope": [
                "string.regexp.js "
            ],
            "rules": [
                {
                    "match": "[gimyus]",
                    "captures": [
                        [
                            "keyword.other.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "[A-Za-z0-9]",
                    "captures": [],
                    "pop": false
                },
                {
                    "match": "",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "meta_include_prototype": "false",
            "patterns": [
                "[gimyus]",
                "[A-Za-z0-9]",
                ""
            ]
        },
        "regexp:1": {
            "name": "regexp:1",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=/)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "meta_include_prototype": "false",
            "patterns": [
                "(?=/)"
            ]
        },
        "regexp": {
            "name": "regexp",
            "meta_scope": [
                "string.regexp.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "/",
                    "captures": [
                        [
                            "punctuation.definition.string.end.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "regexp:0"
                    ]
                },
                {
                    "match": "(?=.|\\n)",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "regexp:1"
                    ]
                }
            ],
            "meta_include_prototype": "false",
            "patterns": [
                "/",
                "(?=.|\\n)"
            ]
        },
        "constructor:0": {
            "name": "constructor:0",
            "meta_scope": [
                "meta.instance.constructor.js ",
                "meta.function-call.constructor.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=\\s*\\.)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "new-target"
                    ]
                },
                {
                    "match": "(?=\\s*\\S)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "constructor-meta",
                        "constructor-body-expect-arguments",
                        "constructor-body-expect-class-end",
                        "constructor-body-expect-class-begin"
                    ]
                }
            ],
            "patterns": [
                "(?=\\s*\\.)",
                "(?=\\s*\\S)"
            ]
        },
        "constructor-meta": {
            "name": "constructor-meta",
            "meta_scope": [
                "meta.instance.constructor.js ",
                "meta.function-call.constructor.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ""
            ]
        },
        "function-call-arguments": {
            "name": "function-call-arguments",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\(",
                    "captures": [
                        [
                            "punctuation.section.group.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "function-call-arguments:0"
                    ]
                }
            ],
            "patterns": [
                "\\("
            ]
        },
        "constructor-body-expect-arguments": {
            "name": "constructor-body-expect-arguments",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\(",
                    "captures": [
                        [
                            "punctuation.section.group.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "function-call-arguments:0"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\(",
                "(?=\\S)"
            ]
        },
        "constructor-body-expect-class-end": {
            "name": "constructor-body-expect-class-end",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\[",
                    "captures": [
                        [
                            "punctuation.section.brackets.begin.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "property-access:0"
                    ]
                },
                {
                    "match": "\\.",
                    "captures": [
                        [
                            "punctuation.accessor.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "object-property"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\[",
                "\\.",
                "(?=\\S)"
            ]
        },
        "constructor-body-expect-class-begin:0": {
            "name": "constructor-body-expect-class-begin:0",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.type.dollar.only.js ",
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.type.dollar.js "
                        ],
                        [
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.type.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=\\S)"
            ]
        },
        "constructor-body-expect-class-begin": {
            "name": "constructor-body-expect-class-begin",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(Array|Boolean|Date|Function|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|WeakMap|XMLHttpRequest)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.builtin.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "((Eval|Range|Reference|Syntax|Type|URI)?Error)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.error.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(document|window|navigator)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.type.object.dom.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.node.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "constructor-body-expect-class-begin:0"
                    ]
                },
                {
                    "match": "(?=[;})\\]])",
                    "captures": [],
                    "pop": "true"
                },
                {
                    "match": "(?x)\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\n  \\s*(\\.)\\s*\n  (prototype)\n  (?=\\s*=\\s*(?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>))",
                    "captures": [
                        [
                            "meta.prototype.declaration.js "
                        ],
                        [
                            "support.class.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.constant.prototype.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "function-initializer"
                    ]
                },
                {
                    "match": "(?x)\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\n  \\s*(\\.)\\s*\n  (prototype)\\s*(\\.)\\s*\n  (?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*=\\s*(?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>))",
                    "captures": [
                        null,
                        [
                            "support.class.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.constant.prototype.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "function-initializer",
                        "function-declaration-single-identifier"
                    ]
                },
                {
                    "match": "([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))(\\.)(prototype)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.prototype.access.js "
                        ],
                        [
                            "support.class.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.constant.prototype.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "/",
                    "captures": [
                        [
                            "punctuation.definition.string.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "regexp"
                    ]
                },
                {
                    "match": "'",
                    "captures": [
                        [
                            "punctuation.definition.string.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string:0"
                    ]
                },
                {
                    "match": "\"",
                    "captures": [
                        [
                            "punctuation.definition.string.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string:1"
                    ]
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*`)",
                    "captures": [
                        [
                            "variable.function.tagged-template.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "tagged-template:0"
                    ]
                },
                {
                    "match": "`",
                    "captures": [
                        [
                            "punctuation.definition.string.template.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string-template:0"
                    ]
                },
                {
                    "match": "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*\\.)",
                    "captures": [
                        [
                            "keyword.operator.word.new.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "new-target"
                    ]
                },
                {
                    "match": "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.operator.word.new.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "constructor:0"
                    ]
                },
                {
                    "match": "~",
                    "captures": [
                        [
                            "keyword.operator.bitwise.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "!(?!=)",
                    "captures": [
                        [
                            "keyword.operator.logical.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "--",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\+\\+",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\.\\.\\.",
                    "captures": [
                        [
                            "keyword.operator.spread.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\+|\\-",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.operator.word.new.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(?:delete|typeof|void)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.operator.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "yield(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.flow.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "yield-expression:0"
                    ]
                },
                {
                    "match": "await(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.flow.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "import(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.import.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "import-meta-expression-dot"
                    ]
                },
                {
                    "match": "class(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "storage.type.class.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "class-meta",
                        "class-body",
                        "class-extends",
                        "class-name"
                    ]
                },
                {
                    "match": "true(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.boolean.true.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "false(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.boolean.false.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "null(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.null.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "undefined(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.undefined.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "NaN(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.nan.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?x)(?=\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]) \\s* \\. \\s*)*\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  \\s* = \\s*\n  (?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)\n)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "function-initializer",
                        "function-declaration-identifiers"
                    ]
                },
                {
                    "match": "(?=\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "function-declaration"
                    ]
                },
                {
                    "match": "(?=\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "arrow-function-declaration"
                    ]
                },
                {
                    "match": "\\{",
                    "captures": [
                        [
                            "punctuation.section.block.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "object-literal-contents"
                    ]
                },
                {
                    "match": "\\(",
                    "captures": [
                        [
                            "punctuation.section.group.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "parenthesized-expression:0"
                    ]
                },
                {
                    "match": "\\[",
                    "captures": [
                        [
                            "punctuation.section.brackets.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "array-literal:0"
                    ]
                },
                {
                    "match": "[+-]?0[0-9]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.octal.js ",
                            "invalid.deprecated.numeric.octal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Xx])[0-9a-fA-F_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.hexadecimal.js "
                        ],
                        [
                            "punctuation.definition.numeric.hexadecimal.js "
                        ],
                        [
                            "storage.type.numeric.bigint.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Oo])[0-7_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.octal.js "
                        ],
                        [
                            "punctuation.definition.numeric.octal.js "
                        ],
                        [
                            "storage.type.numeric.bigint.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Bb])[0-1_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.binary.js "
                        ],
                        [
                            "punctuation.definition.numeric.binary.js "
                        ],
                        [
                            "storage.type.numeric.bigint.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(?:0|[1-9][0-9_]*)(n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.decimal.js "
                        ],
                        [
                            "storage.type.numeric.bigint.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?x)\n[-+]?\n(\n  (0|[1-9][0-9_]*)\n  (\\.[0-9_]*|(?!\\.))\n  |\n  \\.[0-9_]+\n)\n([Ee]([+-]|(?![-+]))[0-9_]*)?\n(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.decimal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(Infinity)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.infinity.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Xx])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.numeric.hexadecimal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Oo])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.numeric.octal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Bb])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.numeric.binary.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.numeric.octal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?([1-9])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?:\\.[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))?",
                    "captures": [
                        [
                            "invalid.illegal.numeric.decimal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "call-expression-meta",
                        "function-call-arguments",
                        "call-expression-function-name"
                    ]
                },
                {
                    "match": "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\.\\s*[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "literal-call:0"
                    ]
                },
                {
                    "match": "(Array|Boolean|Date|Function|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|WeakMap|XMLHttpRequest)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.builtin.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "((Eval|Range|Reference|Syntax|Type|URI)?Error)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.error.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(document|window|navigator)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.type.object.dom.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.node.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "arguments(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.arguments.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "super(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.super.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "this(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.this.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "self(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.self.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.dollar.only.js ",
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.dollar.js "
                        ],
                        [
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?x)\n(\n  ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|\n  DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|\n  WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR\n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.constant.dom.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(assert|buffer|child_process|cluster|constants|crypto|dgram|dns|domain|events|fs|http|https|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|timers|tls|tty|url|util|vm|zlib)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.module.node.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(process)(?:(\\.)(arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions))?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        null,
                        [
                            "support.type.object.process.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.type.object.process.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(exports|module(?:(\\.)(exports|id|filename|loaded|parent|children))?)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        null,
                        [
                            "support.type.object.module.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.type.object.module.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(global|GLOBAL|root|__dirname|__filename)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.type.object.node.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*[\\[.])",
                    "captures": [
                        [
                            "support.class.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*[\\[.])",
                    "captures": [
                        [
                            "variable.other.object.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.constant.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.readwrite.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(#)([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [
                        null,
                        [
                            "punctuation.definition.variable.js "
                        ],
                        [
                            "variable.other.readwrite.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(Array|Boolean|Date|Function|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|WeakMap|XMLHttpRequest)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "((Eval|Range|Reference|Syntax|Type|URI)?Error)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(document|window|navigator)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                "(?=[;})\\]])",
                "(?x)\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\n  \\s*(\\.)\\s*\n  (prototype)\n  (?=\\s*=\\s*(?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>))",
                "(?x)\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\n  \\s*(\\.)\\s*\n  (prototype)\\s*(\\.)\\s*\n  (?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*=\\s*(?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>))",
                "([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))(\\.)(prototype)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "/",
                "'",
                "\"",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*`)",
                "`",
                "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*\\.)",
                "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "~",
                "!(?!=)",
                "--",
                "\\+\\+",
                "\\.\\.\\.",
                "\\+|\\-",
                "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?:delete|typeof|void)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "yield(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "await(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "import(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "class(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "true(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "false(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "null(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "undefined(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "NaN(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?x)(?=\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]) \\s* \\. \\s*)*\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  \\s* = \\s*\n  (?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)\n)",
                "(?=\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                "(?=\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)",
                "\\{",
                "\\(",
                "\\[",
                "[+-]?0[0-9]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Xx])[0-9a-fA-F_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Oo])[0-7_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Bb])[0-1_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(?:0|[1-9][0-9_]*)(n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?x)\n[-+]?\n(\n  (0|[1-9][0-9_]*)\n  (\\.[0-9_]*|(?!\\.))\n  |\n  \\.[0-9_]+\n)\n([Ee]([+-]|(?![-+]))[0-9_]*)?\n(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(Infinity)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Xx])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Oo])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Bb])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?([1-9])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?:\\.[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))?",
                "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\.\\s*[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                "(Array|Boolean|Date|Function|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|WeakMap|XMLHttpRequest)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "((Eval|Range|Reference|Syntax|Type|URI)?Error)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(document|window|navigator)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "arguments(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "super(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "this(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "self(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?x)\n(\n  ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|\n  DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|\n  WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR\n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(assert|buffer|child_process|cluster|constants|crypto|dgram|dns|domain|events|fs|http|https|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|timers|tls|tty|url|util|vm|zlib)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(process)(?:(\\.)(arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions))?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(exports|module(?:(\\.)(exports|id|filename|loaded|parent|children))?)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(global|GLOBAL|root|__dirname|__filename)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*[\\[.])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*[\\[.])",
                "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(#)([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                "(?=\\S)"
            ]
        },
        "new-target:0": {
            "name": "new-target:0",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\btarget\\b",
                    "captures": [
                        [
                            "variable.language.target.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\btarget\\b",
                "(?=\\S)"
            ]
        },
        "new-target": {
            "name": "new-target",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\.",
                    "captures": [
                        [
                            "punctuation.accessor.dot.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "new-target:0"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\.",
                "(?=\\S)"
            ]
        },
        "ternary-operator-expect-colon": {
            "name": "ternary-operator-expect-colon",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": ":",
                    "captures": [
                        [
                            "keyword.operator.ternary.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "expression-no-comma"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ":",
                "(?=\\S)"
            ]
        },
        "yield-expression:0": {
            "name": "yield-expression:0",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "$",
                    "captures": [],
                    "pop": "true"
                },
                {
                    "match": "\\*",
                    "captures": [
                        [
                            "keyword.generator.asterisk.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "expression-begin"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "expression-begin"
                    ]
                }
            ],
            "patterns": [
                "$",
                "\\*",
                "(?=\\S)"
            ]
        },
        "class-meta": {
            "name": "class-meta",
            "meta_scope": [
                "meta.class.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ""
            ]
        },
        "class-body": {
            "name": "class-body",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\{",
                    "captures": [
                        [
                            "punctuation.section.block.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "class-body-contents"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\{",
                "(?=\\S)"
            ]
        },
        "class-body-contents": {
            "name": "class-body-contents",
            "meta_scope": [
                "meta.block.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\}",
                    "captures": [
                        [
                            "punctuation.section.block.end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\;",
                    "captures": [
                        [
                            "punctuation.terminator.statement.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "@",
                    "captures": [
                        [
                            "punctuation.definition.annotation.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "decorator-meta",
                        "decorator-expression-end",
                        "decorator-expression-begin"
                    ]
                },
                {
                    "match": "constructor(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "entity.name.function.constructor.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "function-declaration-expect-body",
                        "function-declaration-meta",
                        "function-declaration-expect-parameters"
                    ]
                },
                {
                    "match": "static(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "storage.modifier.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "class-field"
                    ]
                },
                {
                    "match": "(?=(?x)(?:\n  (?x)(?:\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  | '(?:[^\\\\']|\\\\.)*'\n  | \"(?:[^\\\\\"]|\\\\.)*\"\n  | \\[ .* \\]\n)\n  | \\#[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n))",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "class-field"
                    ]
                }
            ],
            "patterns": [
                "\\}",
                "\\;",
                "@",
                "constructor(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "static(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=(?x)(?:\n  (?x)(?:\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  | '(?:[^\\\\']|\\\\.)*'\n  | \"(?:[^\\\\\"]|\\\\.)*\"\n  | \\[ .* \\]\n)\n  | \\#[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n))"
            ]
        },
        "class-extends": {
            "name": "class-extends",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "extends(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "storage.modifier.extends.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "inherited-class-expression-end",
                        "inherited-class-expression-begin"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "extends(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=\\S)"
            ]
        },
        "inherited-class-name": {
            "name": "inherited-class-name",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?!\\s*[.\\[\\(])",
                    "captures": [
                        [
                            "entity.other.inherited-class.js "
                        ]
                    ],
                    "pop": "true"
                }
            ],
            "patterns": [
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?!\\s*[.\\[\\(])"
            ]
        },
        "inherited-class-expression-end:0": {
            "name": "inherited-class-expression-end:0",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?!\\s*[.\\[\\(])",
                    "captures": [
                        [
                            "entity.other.inherited-class.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?x)(?=\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  \\s* = \\s*\n  (?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)\n)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "function-initializer",
                        "function-declaration-final-identifier"
                    ]
                },
                {
                    "match": "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "object-property:0"
                    ]
                },
                {
                    "match": "__proto__(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.proto.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "constructor(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.constructor.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "prototype(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.prototype.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.property.object.dollar.only.js ",
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.property.object.dollar.js "
                        ],
                        [
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(s(hape|ystemId|c(heme|ope|rolling)|ta(ndby|rt)|ize|ummary|pecified|e(ctionRowIndex|lected(Index)?)|rc)|h(space|t(tpEquiv|mlFor)|e(ight|aders)|ref(lang)?)|n(o(Resize|tation(s|Name)|Shade|Href|de(Name|Type|Value)|Wrap)|extSibling|ame)|c(h(ildNodes|Off|ecked|arset)?|ite|o(ntent|o(kie|rds)|de(Base|Type)?|l(s|Span|or)|mpact)|ell(s|Spacing|Padding)|l(ear|assName)|aption)|t(ype|Bodies|itle|Head|ext|a(rget|gName)|Foot)|i(sMap|ndex|d|m(plementation|ages))|o(ptions|wnerDocument|bject)|d(i(sabled|r)|o(c(type|umentElement)|main)|e(clare|f(er|ault(Selected|Checked|Value)))|at(eTime|a))|useMap|p(ublicId|arentNode|r(o(file|mpt)|eviousSibling))|e(n(ctype|tities)|vent|lements)|v(space|ersion|alue(Type)?|Link|Align)|URL|f(irstChild|orm(s)?|ace|rame(Border)?)|width|l(ink(s)?|o(ngDesc|wSrc)|a(stChild|ng|bel))|a(nchors|c(ce(ssKey|pt(Charset)?)|tion)|ttributes|pplets|l(t|ign)|r(chive|eas)|xis|Link|bbr)|r(ow(s|Span|Index)|ules|e(v|ferrer|l|adOnly))|m(ultiple|e(thod|dia)|a(rgin(Height|Width)|xLength))|b(o(dy|rder)|ackground|gColor))(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.constant.dom.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.property.object.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.illegal-identifier.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?!\\s*[.\\[\\(])",
                "(?x)(?=\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  \\s* = \\s*\n  (?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)\n)",
                "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                "__proto__(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "constructor(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "prototype(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(s(hape|ystemId|c(heme|ope|rolling)|ta(ndby|rt)|ize|ummary|pecified|e(ctionRowIndex|lected(Index)?)|rc)|h(space|t(tpEquiv|mlFor)|e(ight|aders)|ref(lang)?)|n(o(Resize|tation(s|Name)|Shade|Href|de(Name|Type|Value)|Wrap)|extSibling|ame)|c(h(ildNodes|Off|ecked|arset)?|ite|o(ntent|o(kie|rds)|de(Base|Type)?|l(s|Span|or)|mpact)|ell(s|Spacing|Padding)|l(ear|assName)|aption)|t(ype|Bodies|itle|Head|ext|a(rget|gName)|Foot)|i(sMap|ndex|d|m(plementation|ages))|o(ptions|wnerDocument|bject)|d(i(sabled|r)|o(c(type|umentElement)|main)|e(clare|f(er|ault(Selected|Checked|Value)))|at(eTime|a))|useMap|p(ublicId|arentNode|r(o(file|mpt)|eviousSibling))|e(n(ctype|tities)|vent|lements)|v(space|ersion|alue(Type)?|Link|Align)|URL|f(irstChild|orm(s)?|ace|rame(Border)?)|width|l(ink(s)?|o(ngDesc|wSrc)|a(stChild|ng|bel))|a(nchors|c(ce(ssKey|pt(Charset)?)|tion)|ttributes|pplets|l(t|ign)|r(chive|eas)|xis|Link|bbr)|r(ow(s|Span|Index)|ules|e(v|ferrer|l|adOnly))|m(ultiple|e(thod|dia)|a(rgin(Height|Width)|xLength))|b(o(dy|rder)|ackground|gColor))(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=\\S)"
            ]
        },
        "inherited-class-expression-end": {
            "name": "inherited-class-expression-end",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\.",
                    "captures": [
                        [
                            "punctuation.accessor.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "inherited-class-expression-end:0"
                    ]
                },
                {
                    "match": "(?=[;})\\]])",
                    "captures": [],
                    "pop": "true"
                },
                {
                    "match": "\\[",
                    "captures": [
                        [
                            "punctuation.section.brackets.begin.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "property-access:0"
                    ]
                },
                {
                    "match": "\\.",
                    "captures": [
                        [
                            "punctuation.accessor.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "object-property"
                    ]
                },
                {
                    "match": "`",
                    "captures": [
                        [
                            "punctuation.definition.string.template.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string-template:0"
                    ]
                },
                {
                    "match": "(?=\\()",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "function-call-arguments"
                    ]
                },
                {
                    "match": "=>",
                    "captures": [
                        [
                            "storage.type.function.arrow.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "arrow-function-expect-body"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\.",
                "(?=[;})\\]])",
                "\\[",
                "\\.",
                "`",
                "(?=\\()",
                "=>",
                "(?=\\S)"
            ]
        },
        "inherited-class-expression-begin": {
            "name": "inherited-class-expression-begin",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?!\\s*[.\\[\\(])",
                    "captures": [
                        [
                            "entity.other.inherited-class.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=[;})\\]])",
                    "captures": [],
                    "pop": "true"
                },
                {
                    "match": "(?x)\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\n  \\s*(\\.)\\s*\n  (prototype)\n  (?=\\s*=\\s*(?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>))",
                    "captures": [
                        [
                            "meta.prototype.declaration.js "
                        ],
                        [
                            "support.class.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.constant.prototype.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "function-initializer"
                    ]
                },
                {
                    "match": "(?x)\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\n  \\s*(\\.)\\s*\n  (prototype)\\s*(\\.)\\s*\n  (?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*=\\s*(?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>))",
                    "captures": [
                        null,
                        [
                            "support.class.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.constant.prototype.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "function-initializer",
                        "function-declaration-single-identifier"
                    ]
                },
                {
                    "match": "([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))(\\.)(prototype)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.prototype.access.js "
                        ],
                        [
                            "support.class.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.constant.prototype.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "/",
                    "captures": [
                        [
                            "punctuation.definition.string.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "regexp"
                    ]
                },
                {
                    "match": "'",
                    "captures": [
                        [
                            "punctuation.definition.string.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string:0"
                    ]
                },
                {
                    "match": "\"",
                    "captures": [
                        [
                            "punctuation.definition.string.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string:1"
                    ]
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*`)",
                    "captures": [
                        [
                            "variable.function.tagged-template.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "tagged-template:0"
                    ]
                },
                {
                    "match": "`",
                    "captures": [
                        [
                            "punctuation.definition.string.template.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "literal-string-template:0"
                    ]
                },
                {
                    "match": "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*\\.)",
                    "captures": [
                        [
                            "keyword.operator.word.new.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "new-target"
                    ]
                },
                {
                    "match": "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.operator.word.new.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "constructor:0"
                    ]
                },
                {
                    "match": "~",
                    "captures": [
                        [
                            "keyword.operator.bitwise.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "!(?!=)",
                    "captures": [
                        [
                            "keyword.operator.logical.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "--",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\+\\+",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\.\\.\\.",
                    "captures": [
                        [
                            "keyword.operator.spread.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\+|\\-",
                    "captures": [
                        [
                            "keyword.operator.arithmetic.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.operator.word.new.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(?:delete|typeof|void)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.operator.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "yield(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.flow.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "yield-expression:0"
                    ]
                },
                {
                    "match": "await(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "keyword.control.flow.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "import(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.import.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "import-meta-expression-dot"
                    ]
                },
                {
                    "match": "class(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "storage.type.class.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "class-meta",
                        "class-body",
                        "class-extends",
                        "class-name"
                    ]
                },
                {
                    "match": "true(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.boolean.true.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "false(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.boolean.false.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "null(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.null.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "undefined(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.undefined.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "NaN(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.nan.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?x)(?=\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]) \\s* \\. \\s*)*\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  \\s* = \\s*\n  (?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)\n)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "function-initializer",
                        "function-declaration-identifiers"
                    ]
                },
                {
                    "match": "(?=\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "function-declaration"
                    ]
                },
                {
                    "match": "(?=\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "arrow-function-declaration"
                    ]
                },
                {
                    "match": "\\{",
                    "captures": [
                        [
                            "punctuation.section.block.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "object-literal-contents"
                    ]
                },
                {
                    "match": "\\(",
                    "captures": [
                        [
                            "punctuation.section.group.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "parenthesized-expression:0"
                    ]
                },
                {
                    "match": "\\[",
                    "captures": [
                        [
                            "punctuation.section.brackets.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "array-literal:0"
                    ]
                },
                {
                    "match": "[+-]?0[0-9]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.octal.js ",
                            "invalid.deprecated.numeric.octal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Xx])[0-9a-fA-F_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.hexadecimal.js "
                        ],
                        [
                            "punctuation.definition.numeric.hexadecimal.js "
                        ],
                        [
                            "storage.type.numeric.bigint.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Oo])[0-7_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.octal.js "
                        ],
                        [
                            "punctuation.definition.numeric.octal.js "
                        ],
                        [
                            "storage.type.numeric.bigint.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Bb])[0-1_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.binary.js "
                        ],
                        [
                            "punctuation.definition.numeric.binary.js "
                        ],
                        [
                            "storage.type.numeric.bigint.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(?:0|[1-9][0-9_]*)(n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.decimal.js "
                        ],
                        [
                            "storage.type.numeric.bigint.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?x)\n[-+]?\n(\n  (0|[1-9][0-9_]*)\n  (\\.[0-9_]*|(?!\\.))\n  |\n  \\.[0-9_]+\n)\n([Ee]([+-]|(?![-+]))[0-9_]*)?\n(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.decimal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(Infinity)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.infinity.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Xx])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.numeric.hexadecimal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Oo])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.numeric.octal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Bb])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.numeric.binary.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.numeric.octal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?([1-9])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?:\\.[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))?",
                    "captures": [
                        [
                            "invalid.illegal.numeric.decimal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "call-expression-meta",
                        "function-call-arguments",
                        "call-expression-function-name"
                    ]
                },
                {
                    "match": "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\.\\s*[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "literal-call:0"
                    ]
                },
                {
                    "match": "(Array|Boolean|Date|Function|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|WeakMap|XMLHttpRequest)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.builtin.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "((Eval|Range|Reference|Syntax|Type|URI)?Error)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.error.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(document|window|navigator)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.type.object.dom.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.node.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "arguments(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.arguments.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "super(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.super.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "this(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.this.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "self(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.self.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.dollar.only.js ",
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.dollar.js "
                        ],
                        [
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?x)\n(\n  ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|\n  DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|\n  WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR\n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.constant.dom.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(assert|buffer|child_process|cluster|constants|crypto|dgram|dns|domain|events|fs|http|https|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|timers|tls|tty|url|util|vm|zlib)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.module.node.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(process)(?:(\\.)(arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions))?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        null,
                        [
                            "support.type.object.process.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.type.object.process.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(exports|module(?:(\\.)(exports|id|filename|loaded|parent|children))?)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        null,
                        [
                            "support.type.object.module.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.type.object.module.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(global|GLOBAL|root|__dirname|__filename)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.type.object.node.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*[\\[.])",
                    "captures": [
                        [
                            "support.class.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*[\\[.])",
                    "captures": [
                        [
                            "variable.other.object.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.constant.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.readwrite.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(#)([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [
                        null,
                        [
                            "punctuation.definition.variable.js "
                        ],
                        [
                            "variable.other.readwrite.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?!\\s*[.\\[\\(])",
                "(?=[;})\\]])",
                "(?x)\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\n  \\s*(\\.)\\s*\n  (prototype)\n  (?=\\s*=\\s*(?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>))",
                "(?x)\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\n  \\s*(\\.)\\s*\n  (prototype)\\s*(\\.)\\s*\n  (?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*=\\s*(?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>))",
                "([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))(\\.)(prototype)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "/",
                "'",
                "\"",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*`)",
                "`",
                "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*\\.)",
                "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "~",
                "!(?!=)",
                "--",
                "\\+\\+",
                "\\.\\.\\.",
                "\\+|\\-",
                "new(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?:delete|typeof|void)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "yield(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "await(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "import(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "class(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "true(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "false(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "null(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "undefined(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "NaN(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?x)(?=\n  ([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]) \\s* \\. \\s*)*\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  \\s* = \\s*\n  (?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)\n)",
                "(?=\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                "(?=\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)",
                "\\{",
                "\\(",
                "\\[",
                "[+-]?0[0-9]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Xx])[0-9a-fA-F_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Oo])[0-7_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Bb])[0-1_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(?:0|[1-9][0-9_]*)(n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?x)\n[-+]?\n(\n  (0|[1-9][0-9_]*)\n  (\\.[0-9_]*|(?!\\.))\n  |\n  \\.[0-9_]+\n)\n([Ee]([+-]|(?![-+]))[0-9_]*)?\n(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(Infinity)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Xx])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Oo])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Bb])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?([1-9])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?:\\.[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))?",
                "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\.\\s*[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                "(Array|Boolean|Date|Function|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|WeakMap|XMLHttpRequest)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "((Eval|Range|Reference|Syntax|Type|URI)?Error)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(document|window|navigator)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "arguments(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "super(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "this(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "self(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?x)\n(\n  ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|\n  DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|\n  WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR\n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(assert|buffer|child_process|cluster|constants|crypto|dgram|dns|domain|events|fs|http|https|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|timers|tls|tty|url|util|vm|zlib)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(process)(?:(\\.)(arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions))?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(exports|module(?:(\\.)(exports|id|filename|loaded|parent|children))?)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(global|GLOBAL|root|__dirname|__filename)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*[\\[.])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*[\\[.])",
                "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(#)([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                "(?=\\S)"
            ]
        },
        "class-name": {
            "name": "class-name",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "entity.name.class.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=\\S)"
            ]
        },
        "class-field": {
            "name": "class-field",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?x)(?=\n  (?: get|set|async )(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  | \\*\n  | (?x)(?:\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  | '(?:[^\\\\']|\\\\.)*'\n  | \"(?:[^\\\\\"]|\\\\.)*\"\n  | \\[ .* \\]\n) \\s* \\(\n)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "method-declaration"
                    ]
                },
                {
                    "match": "(?=(?x)(?:\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  | '(?:[^\\\\']|\\\\.)*'\n  | \"(?:[^\\\\\"]|\\\\.)*\"\n  | \\[ .* \\]\n))",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "field-initializer-or-method-declaration",
                        "field-name"
                    ]
                },
                {
                    "match": "(?=#[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "class-field-rest",
                        "initializer",
                        "field-name"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(?x)(?=\n  (?: get|set|async )(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  | \\*\n  | (?x)(?:\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  | '(?:[^\\\\']|\\\\.)*'\n  | \"(?:[^\\\\\"]|\\\\.)*\"\n  | \\[ .* \\]\n) \\s* \\(\n)",
                "(?=(?x)(?:\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  | '(?:[^\\\\']|\\\\.)*'\n  | \"(?:[^\\\\\"]|\\\\.)*\"\n  | \\[ .* \\]\n))",
                "(?=#[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                "(?=\\S)"
            ]
        },
        "class-field-rest": {
            "name": "class-field-rest",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": ",",
                    "captures": [
                        [
                            "punctuation.separator.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "initializer",
                        "field-name"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ",",
                "(?=\\S)"
            ]
        },
        "field-initializer-or-method-declaration": {
            "name": "field-initializer-or-method-declaration",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=\\()",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "function-declaration-expect-body",
                        "function-declaration-meta",
                        "function-declaration-expect-parameters"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "class-field-rest",
                        "initializer"
                    ]
                }
            ],
            "patterns": [
                "(?=\\()",
                "(?=\\S)"
            ]
        },
        "function-declaration-single-identifier": {
            "name": "function-declaration-single-identifier",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.dollar.only.js ",
                            "punctuation.dollar.js ",
                            "entity.name.function.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.dollar.js ",
                            "entity.name.function.js "
                        ],
                        [
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.constant.js ",
                            "entity.name.function.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.readwrite.js ",
                            "entity.name.function.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=\\S)"
            ]
        },
        "function-declaration-identifiers": {
            "name": "function-declaration-identifiers",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\.)",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "expect-dot-accessor",
                        "function-declaration-identifiers-expect-class"
                    ]
                },
                {
                    "match": "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.dollar.only.js ",
                            "punctuation.dollar.js ",
                            "entity.name.function.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.dollar.js ",
                            "entity.name.function.js "
                        ],
                        [
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.constant.js ",
                            "entity.name.function.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.readwrite.js ",
                            "entity.name.function.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\.)",
                "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=\\S)"
            ]
        },
        "expect-dot-accessor": {
            "name": "expect-dot-accessor",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\.",
                    "captures": [
                        [
                            "punctuation.accessor.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\.",
                "(?=\\S)"
            ]
        },
        "function-declaration-identifiers-expect-class": {
            "name": "function-declaration-identifiers-expect-class",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "prototype(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.constant.prototype.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "arguments(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.arguments.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "super(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.super.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "this(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.this.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "self(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.self.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.dollar.only.js ",
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.dollar.js "
                        ],
                        [
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "prototype(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "arguments(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "super(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "this(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "self(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=\\S)"
            ]
        },
        "function-declaration-final-identifier": {
            "name": "function-declaration-final-identifier",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.property.object.dollar.only.js ",
                            "punctuation.dollar.js ",
                            "entity.name.function.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.property.object.dollar.js ",
                            "entity.name.function.js "
                        ],
                        [
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.property.object.constant.js ",
                            "entity.name.function.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.property.object.readwrite.js ",
                            "entity.name.function.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[[:upper:]][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=\\S)"
            ]
        },
        "function-declaration": {
            "name": "function-declaration",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "function-declaration-expect-body",
                        "function-declaration-meta",
                        "function-declaration-expect-parameters",
                        "function-declaration-expect-name",
                        "function-declaration-expect-generator-star",
                        "function-declaration-expect-function-keyword",
                        "function-declaration-expect-async"
                    ]
                }
            ],
            "patterns": [
                ""
            ]
        },
        "function-declaration-expect-body": {
            "name": "function-declaration-expect-body",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "function-block"
                    ]
                }
            ],
            "patterns": [
                "(?=\\S)"
            ]
        },
        "function-declaration-meta": {
            "name": "function-declaration-meta",
            "meta_scope": [
                "meta.function.declaration.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "meta_include_prototype": "false",
            "patterns": [
                ""
            ]
        },
        "function-declaration-parameters": {
            "name": "function-declaration-parameters",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\(",
                    "captures": [
                        [
                            "punctuation.section.group.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "function-declaration-parameters:0"
                    ]
                }
            ],
            "patterns": [
                "\\("
            ]
        },
        "function-declaration-expect-parameters": {
            "name": "function-declaration-expect-parameters",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\(",
                    "captures": [
                        [
                            "punctuation.section.group.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "function-declaration-parameters:0"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\(",
                "(?=\\S)"
            ]
        },
        "function-declaration-expect-name": {
            "name": "function-declaration-expect-name",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "entity.name.function.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=\\S)"
            ]
        },
        "function-declaration-expect-generator-star": {
            "name": "function-declaration-expect-generator-star",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\*",
                    "captures": [
                        [
                            "keyword.generator.asterisk.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\*",
                "(?=\\S)"
            ]
        },
        "function-declaration-expect-function-keyword": {
            "name": "function-declaration-expect-function-keyword",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "storage.type.function.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=\\S)"
            ]
        },
        "function-declaration-expect-async": {
            "name": "function-declaration-expect-async",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "async(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "storage.type.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "async(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=\\S)"
            ]
        },
        "arrow-function-declaration": {
            "name": "arrow-function-declaration",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "arrow-function-expect-body",
                        "function-declaration-meta",
                        "arrow-function-expect-arrow",
                        "arrow-function-expect-parameters",
                        "function-declaration-expect-async"
                    ]
                }
            ],
            "patterns": [
                ""
            ]
        },
        "arrow-function-expect-body": {
            "name": "arrow-function-expect-body",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=\\{)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "function-block"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "block-meta",
                        "expression-no-comma"
                    ]
                }
            ],
            "patterns": [
                "(?=\\{)",
                "(?=\\S)"
            ]
        },
        "arrow-function-expect-arrow": {
            "name": "arrow-function-expect-arrow",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "=>",
                    "captures": [
                        [
                            "storage.type.function.arrow.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "=>",
                "(?=\\S)"
            ]
        },
        "arrow-function-expect-parameters": {
            "name": "arrow-function-expect-parameters",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.parameter.function.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\(",
                    "captures": [
                        [
                            "punctuation.section.group.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "function-declaration-parameters:0"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "\\(",
                "(?=\\S)"
            ]
        },
        "function-block:0": {
            "name": "function-block:0",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=\\})",
                    "captures": [],
                    "pop": "true"
                },
                {
                    "match": "\\)|\\}|\\]",
                    "captures": [
                        [
                            "invalid.illegal.stray-bracket-end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "statement"
                    ]
                }
            ],
            "patterns": [
                "(?=\\})",
                "\\)|\\}|\\]",
                "(?=\\S)"
            ]
        },
        "function-block": {
            "name": "function-block",
            "meta_scope": [
                "meta.block.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\}",
                    "captures": [
                        [
                            "punctuation.section.block.end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\{",
                    "captures": [
                        [
                            "punctuation.section.block.begin.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "function-block:0"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\}",
                "\\{",
                "(?=\\S)"
            ]
        },
        "function-declaration-parameters:0": {
            "name": "function-declaration-parameters:0",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\)",
                    "captures": [
                        [
                            "punctuation.section.group.end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": ",",
                    "captures": [
                        [
                            "punctuation.separator.parameter.function.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\.\\.\\.",
                    "captures": [
                        [
                            "keyword.operator.spread.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "function-parameter-binding-pattern"
                    ]
                },
                {
                    "match": "(?=(?:[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\[|\\{))",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "initializer",
                        "function-parameter-binding-pattern"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\)",
                ",",
                "\\.\\.\\.",
                "(?=(?:[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\[|\\{))",
                "(?=\\S)"
            ]
        },
        "object-literal-contents:0": {
            "name": "object-literal-contents:0",
            "meta_scope": [
                "meta.object-literal.key.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "[+-]?0[0-9]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.octal.js ",
                            "invalid.deprecated.numeric.octal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Xx])[0-9a-fA-F_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.hexadecimal.js "
                        ],
                        [
                            "punctuation.definition.numeric.hexadecimal.js "
                        ],
                        [
                            "storage.type.numeric.bigint.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Oo])[0-7_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.octal.js "
                        ],
                        [
                            "punctuation.definition.numeric.octal.js "
                        ],
                        [
                            "storage.type.numeric.bigint.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Bb])[0-1_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.binary.js "
                        ],
                        [
                            "punctuation.definition.numeric.binary.js "
                        ],
                        [
                            "storage.type.numeric.bigint.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(?:0|[1-9][0-9_]*)(n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.decimal.js "
                        ],
                        [
                            "storage.type.numeric.bigint.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?x)\n[-+]?\n(\n  (0|[1-9][0-9_]*)\n  (\\.[0-9_]*|(?!\\.))\n  |\n  \\.[0-9_]+\n)\n([Ee]([+-]|(?![-+]))[0-9_]*)?\n(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.numeric.decimal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(Infinity)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "constant.language.infinity.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Xx])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.numeric.hexadecimal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Oo])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.numeric.octal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0[Bb])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.numeric.binary.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?(0)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.numeric.octal.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[+-]?([1-9])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?:\\.[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))?",
                    "captures": [
                        [
                            "invalid.illegal.numeric.decimal.js "
                        ]
                    ],
                    "pop": "true"
                }
            ],
            "patterns": [
                "[+-]?0[0-9]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Xx])[0-9a-fA-F_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Oo])[0-7_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Bb])[0-1_]*(n)?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(?:0|[1-9][0-9_]*)(n)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?x)\n[-+]?\n(\n  (0|[1-9][0-9_]*)\n  (\\.[0-9_]*|(?!\\.))\n  |\n  \\.[0-9_]+\n)\n([Ee]([+-]|(?![-+]))[0-9_]*)?\n(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(Infinity)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Xx])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Oo])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0[Bb])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?(0)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[+-]?([1-9])[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?:\\.[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))?"
            ]
        },
        "bare-property-name": {
            "name": "bare-property-name",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.object-literal.key.dollar.only.js ",
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.object-literal.key.dollar.js "
                        ],
                        [
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.object-literal.key.js "
                        ]
                    ],
                    "pop": false
                }
            ],
            "patterns": [
                "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])"
            ]
        },
        "object-literal-contents": {
            "name": "object-literal-contents",
            "meta_scope": [
                "meta.object-literal.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\}",
                    "captures": [
                        [
                            "punctuation.section.block.end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\.\\.\\.",
                    "captures": [
                        [
                            "keyword.operator.spread.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-no-comma"
                    ]
                },
                {
                    "match": "(?x)(?=\n  (?x)(?:\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  | '(?:[^\\\\']|\\\\.)*'\n  | \"(?:[^\\\\\"]|\\\\.)*\"\n  | \\[ .* \\]\n)\\s*:\n  (?: (?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>) )\n)",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "either-function-declaration",
                        "function-declaration-meta",
                        "object-literal-expect-colon",
                        "object-literal-meta-key",
                        "method-name"
                    ]
                },
                {
                    "match": "(?x)(?=\n  (?: get|set|async )(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  | \\*\n  | (?x)(?:\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  | '(?:[^\\\\']|\\\\.)*'\n  | \"(?:[^\\\\\"]|\\\\.)*\"\n  | \\[ .* \\]\n) \\s* \\(\n)",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "method-declaration"
                    ]
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*(?:[},]|$|//|/\\*))",
                    "captures": [
                        [
                            "variable.other.readwrite.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(?=\\[)",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "computed-property-name"
                    ]
                },
                {
                    "match": "(?=\"|')",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "object-literal-meta-key",
                        "literal-string"
                    ]
                },
                {
                    "match": "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.object-literal.key.dollar.only.js ",
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.object-literal.key.dollar.js "
                        ],
                        [
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.object-literal.key.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(?=[-+]?(?:\\.[0-9]|0[bxo]|\\d))",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "object-literal-contents:0"
                    ]
                },
                {
                    "match": ",",
                    "captures": [
                        [
                            "punctuation.separator.comma.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": ":",
                    "captures": [
                        [
                            "punctuation.separator.key-value.js "
                        ]
                    ],
                    "pop": false,
                    "push": [
                        "expression-no-comma"
                    ]
                }
            ],
            "patterns": [
                "\\}",
                "\\.\\.\\.",
                "(?x)(?=\n  (?x)(?:\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  | '(?:[^\\\\']|\\\\.)*'\n  | \"(?:[^\\\\\"]|\\\\.)*\"\n  | \\[ .* \\]\n)\\s*:\n  (?: (?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>) )\n)",
                "(?x)(?=\n  (?: get|set|async )(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  | \\*\n  | (?x)(?:\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  | '(?:[^\\\\']|\\\\.)*'\n  | \"(?:[^\\\\\"]|\\\\.)*\"\n  | \\[ .* \\]\n) \\s* \\(\n)",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\s*(?:[},]|$|//|/\\*))",
                "(?=\\[)",
                "(?=\"|')",
                "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=[-+]?(?:\\.[0-9]|0[bxo]|\\d))",
                ",",
                ":"
            ]
        },
        "computed-property-name:0": {
            "name": "computed-property-name:0",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\]",
                    "captures": [
                        [
                            "punctuation.section.brackets.end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "expression"
                    ]
                }
            ],
            "patterns": [
                "\\]",
                "(?=\\S)"
            ]
        },
        "computed-property-name": {
            "name": "computed-property-name",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\[",
                    "captures": [
                        [
                            "punctuation.section.brackets.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "computed-property-name:0"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\[",
                "(?=\\S)"
            ]
        },
        "object-literal-meta-key": {
            "name": "object-literal-meta-key",
            "meta_scope": [
                "meta.object-literal.key.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(?=\\S)"
            ]
        },
        "object-literal-expect-colon": {
            "name": "object-literal-expect-colon",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": ":",
                    "captures": [
                        [
                            "punctuation.separator.key-value.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                ":",
                "(?=\\S)"
            ]
        },
        "method-name:0": {
            "name": "method-name:0",
            "meta_scope": [
                "string.quoted.single.js "
            ],
            "meta_content_scope": [
                "entity.name.function.js "
            ],
            "rules": [
                {
                    "match": "(')|(\\n)",
                    "captures": [
                        null,
                        [
                            "punctuation.definition.string.end.js "
                        ],
                        [
                            "invalid.illegal.newline.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\\\\\s*\\n",
                    "captures": [
                        [
                            "constant.character.escape.newline.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\\\(x[\\da-fA-F][\\da-fA-F]|u[\\da-fA-F][\\da-fA-F][\\da-fA-F][\\da-fA-F]|.)",
                    "captures": [
                        [
                            "constant.character.escape.js "
                        ]
                    ],
                    "pop": false
                }
            ],
            "meta_include_prototype": "false",
            "patterns": [
                "(')|(\\n)",
                "\\\\\\s*\\n",
                "\\\\(x[\\da-fA-F][\\da-fA-F]|u[\\da-fA-F][\\da-fA-F][\\da-fA-F][\\da-fA-F]|.)"
            ]
        },
        "method-name:1": {
            "name": "method-name:1",
            "meta_scope": [
                "string.quoted.double.js "
            ],
            "meta_content_scope": [
                "entity.name.function.js "
            ],
            "rules": [
                {
                    "match": "(\")|(\\n)",
                    "captures": [
                        null,
                        [
                            "punctuation.definition.string.end.js "
                        ],
                        [
                            "invalid.illegal.newline.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\\\\\s*\\n",
                    "captures": [
                        [
                            "constant.character.escape.newline.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\\\(x[\\da-fA-F][\\da-fA-F]|u[\\da-fA-F][\\da-fA-F][\\da-fA-F][\\da-fA-F]|.)",
                    "captures": [
                        [
                            "constant.character.escape.js "
                        ]
                    ],
                    "pop": false
                }
            ],
            "meta_include_prototype": "false",
            "patterns": [
                "(\")|(\\n)",
                "\\\\\\s*\\n",
                "\\\\(x[\\da-fA-F][\\da-fA-F]|u[\\da-fA-F][\\da-fA-F][\\da-fA-F][\\da-fA-F]|.)"
            ]
        },
        "method-name": {
            "name": "method-name",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.object-literal.key.dollar.js ",
                            "entity.name.function.js "
                        ],
                        [
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "entity.name.function.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "'",
                    "captures": [
                        [
                            "punctuation.definition.string.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "method-name:0"
                    ]
                },
                {
                    "match": "\"",
                    "captures": [
                        [
                            "punctuation.definition.string.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "method-name:1"
                    ]
                },
                {
                    "match": "(?=\\[)",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "computed-property-name"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "'",
                "\"",
                "(?=\\[)",
                "(?=\\S)"
            ]
        },
        "field-name:0": {
            "name": "field-name:0",
            "meta_scope": [
                "string.quoted.single.js "
            ],
            "meta_content_scope": [
                "variable.other.readwrite.js "
            ],
            "rules": [
                {
                    "match": "(')|(\\n)",
                    "captures": [
                        null,
                        [
                            "punctuation.definition.string.end.js "
                        ],
                        [
                            "invalid.illegal.newline.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\\\\\s*\\n",
                    "captures": [
                        [
                            "constant.character.escape.newline.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\\\(x[\\da-fA-F][\\da-fA-F]|u[\\da-fA-F][\\da-fA-F][\\da-fA-F][\\da-fA-F]|.)",
                    "captures": [
                        [
                            "constant.character.escape.js "
                        ]
                    ],
                    "pop": false
                }
            ],
            "meta_include_prototype": "false",
            "patterns": [
                "(')|(\\n)",
                "\\\\\\s*\\n",
                "\\\\(x[\\da-fA-F][\\da-fA-F]|u[\\da-fA-F][\\da-fA-F][\\da-fA-F][\\da-fA-F]|.)"
            ]
        },
        "field-name:1": {
            "name": "field-name:1",
            "meta_scope": [
                "string.quoted.double.js "
            ],
            "meta_content_scope": [
                "variable.other.readwrite.js "
            ],
            "rules": [
                {
                    "match": "(\")|(\\n)",
                    "captures": [
                        null,
                        [
                            "punctuation.definition.string.end.js "
                        ],
                        [
                            "invalid.illegal.newline.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\\\\\s*\\n",
                    "captures": [
                        [
                            "constant.character.escape.newline.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\\\(x[\\da-fA-F][\\da-fA-F]|u[\\da-fA-F][\\da-fA-F][\\da-fA-F][\\da-fA-F]|.)",
                    "captures": [
                        [
                            "constant.character.escape.js "
                        ]
                    ],
                    "pop": false
                }
            ],
            "meta_include_prototype": "false",
            "patterns": [
                "(\")|(\\n)",
                "\\\\\\s*\\n",
                "\\\\(x[\\da-fA-F][\\da-fA-F]|u[\\da-fA-F][\\da-fA-F][\\da-fA-F][\\da-fA-F]|.)"
            ]
        },
        "field-name": {
            "name": "field-name",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.object-literal.key.dollar.js ",
                            "variable.other.readwrite.js "
                        ],
                        [
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.readwrite.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "'",
                    "captures": [
                        [
                            "punctuation.definition.string.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "field-name:0"
                    ]
                },
                {
                    "match": "\"",
                    "captures": [
                        [
                            "punctuation.definition.string.begin.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "field-name:1"
                    ]
                },
                {
                    "match": "(#)([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                    "captures": [
                        null,
                        [
                            "punctuation.definition.variable.js "
                        ],
                        [
                            "variable.other.readwrite.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(?=\\[)",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "computed-property-name"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "'",
                "\"",
                "(#)([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))",
                "(?=\\[)",
                "(?=\\S)"
            ]
        },
        "method-declaration": {
            "name": "method-declaration",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "function-declaration-expect-body",
                        "function-declaration-meta",
                        "function-declaration-expect-parameters",
                        "method-name",
                        "method-declaration-expect-prefix",
                        "function-declaration-expect-async"
                    ]
                }
            ],
            "patterns": [
                ""
            ]
        },
        "method-declaration-expect-prefix": {
            "name": "method-declaration-expect-prefix",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\*",
                    "captures": [
                        [
                            "keyword.generator.asterisk.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(?:get|set)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?!\\s*\\()",
                    "captures": [
                        [
                            "storage.type.accessor.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\*",
                "(?:get|set)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?!\\s*\\()",
                "(?=\\S)"
            ]
        },
        "parenthesized-expression:0": {
            "name": "parenthesized-expression:0",
            "meta_scope": [
                "meta.group.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\)",
                    "captures": [
                        [
                            "punctuation.section.group.end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "expression"
                    ]
                }
            ],
            "patterns": [
                "\\)",
                "(?=\\S)"
            ]
        },
        "function-call-arguments:0": {
            "name": "function-call-arguments:0",
            "meta_scope": [
                "meta.group.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\)",
                    "captures": [
                        [
                            "punctuation.section.group.end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=[;})\\]])",
                    "captures": [],
                    "pop": "true"
                },
                {
                    "match": ",",
                    "captures": [
                        [
                            "punctuation.separator.comma.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "expression-no-comma"
                    ]
                }
            ],
            "patterns": [
                "\\)",
                "(?=[;})\\]])",
                ",",
                "(?=\\S)"
            ]
        },
        "array-literal:0": {
            "name": "array-literal:0",
            "meta_scope": [
                "meta.sequence.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\]",
                    "captures": [
                        [
                            "punctuation.section.brackets.end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=[;})\\]])",
                    "captures": [],
                    "pop": "true"
                },
                {
                    "match": ",",
                    "captures": [
                        [
                            "punctuation.separator.comma.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "expression-no-comma"
                    ]
                }
            ],
            "patterns": [
                "\\]",
                "(?=[;})\\]])",
                ",",
                "(?=\\S)"
            ]
        },
        "property-access:0": {
            "name": "property-access:0",
            "meta_scope": [
                "meta.brackets.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\]",
                    "captures": [
                        [
                            "punctuation.section.brackets.end.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "expression"
                    ]
                }
            ],
            "patterns": [
                "\\]",
                "(?=\\S)"
            ]
        },
        "literal-call:0:0": {
            "name": "literal-call:0:0",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(Array|Boolean|Date|Function|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|WeakMap|XMLHttpRequest)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.builtin.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "((Eval|Range|Reference|Syntax|Type|URI)?Error)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.error.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(document|window|navigator)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.type.object.dom.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.class.node.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "arguments(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.arguments.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "super(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.super.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "this(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.this.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "self(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.self.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.object.dollar.only.js ",
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.object.dollar.js "
                        ],
                        [
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.other.object.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "\\.",
                    "captures": [
                        [
                            "punctuation.accessor.js "
                        ]
                    ],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(Array|Boolean|Date|Function|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|WeakMap|XMLHttpRequest)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "((Eval|Range|Reference|Syntax|Type|URI)?Error)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(document|window|navigator)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "arguments(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "super(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "this(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "self(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "\\."
            ]
        },
        "method-call": {
            "name": "method-call",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?:shift|sort|splice|unshift|pop|push|reverse|copyWithin|fill)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\()",
                    "captures": [
                        [
                            "support.function.mutator.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "call-expression-method-meta",
                        "function-call-arguments"
                    ]
                },
                {
                    "match": "(s(ub(stringData|mit)|plitText|e(t(NamedItem|Attribute(Node)?)|lect))|has(ChildNodes|Feature)|namedItem|c(l(ick|o(se|neNode))|reate(C(omment|DATASection|aption)|T(Head|extNode|Foot)|DocumentFragment|ProcessingInstruction|E(ntityReference|lement)|Attribute))|tabIndex|i(nsert(Row|Before|Cell|Data)|tem)|open|delete(Row|C(ell|aption)|T(Head|Foot)|Data)|focus|write(ln)?|a(dd|ppend(Child|Data))|re(set|place(Child|Data)|move(NamedItem|Child|Attribute(Node)?)?)|get(NamedItem|Element(sBy(Name|TagName)|ById)|Attribute(Node)?)|blur)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\()",
                    "captures": [
                        [
                            "support.function.dom.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "call-expression-method-meta",
                        "function-call-arguments"
                    ]
                },
                {
                    "match": "([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\\s*(?=\\()",
                    "captures": [
                        [
                            "variable.function.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "call-expression-method-meta",
                        "function-call-arguments"
                    ]
                }
            ],
            "patterns": [
                "(?:shift|sort|splice|unshift|pop|push|reverse|copyWithin|fill)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\()",
                "(s(ub(stringData|mit)|plitText|e(t(NamedItem|Attribute(Node)?)|lect))|has(ChildNodes|Feature)|namedItem|c(l(ick|o(se|neNode))|reate(C(omment|DATASection|aption)|T(Head|extNode|Foot)|DocumentFragment|ProcessingInstruction|E(ntityReference|lement)|Attribute))|tabIndex|i(nsert(Row|Before|Cell|Data)|tem)|open|delete(Row|C(ell|aption)|T(Head|Foot)|Data)|focus|write(ln)?|a(dd|ppend(Child|Data))|re(set|place(Child|Data)|move(NamedItem|Child|Attribute(Node)?)?)|get(NamedItem|Element(sBy(Name|TagName)|ById)|Attribute(Node)?)|blur)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\()",
                "([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\\s*(?=\\()"
            ]
        },
        "literal-call:0": {
            "name": "literal-call:0",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(console)(?:(\\.)(warn|info|log|error|time|timeEnd|assert|count|dir|group|groupCollapsed|groupEnd|profile|profileEnd|table|trace|timeStamp))?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        null,
                        [
                            "support.type.object.console.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.function.console.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "call-expression-method-meta",
                        "function-call-arguments"
                    ]
                },
                {
                    "match": "(process)(?:(\\.)(abort|chdir|cwd|disconnect|exit|[sg]ete?[gu]id|send|[sg]etgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime))?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        null,
                        [
                            "support.type.object.process.js "
                        ],
                        [
                            "punctuation.accessor.js "
                        ],
                        [
                            "support.function.process.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "call-expression-method-meta",
                        "function-call-arguments"
                    ]
                },
                {
                    "match": "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\.)",
                    "captures": [],
                    "pop": false,
                    "push": [
                        "literal-call:0:0"
                    ]
                },
                {
                    "match": "\\.",
                    "captures": [
                        [
                            "punctuation.accessor.js "
                        ]
                    ],
                    "pop": false
                },
                {
                    "match": "(?:shift|sort|splice|unshift|pop|push|reverse|copyWithin|fill)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\()",
                    "captures": [
                        [
                            "support.function.mutator.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "call-expression-method-meta",
                        "function-call-arguments"
                    ]
                },
                {
                    "match": "(s(ub(stringData|mit)|plitText|e(t(NamedItem|Attribute(Node)?)|lect))|has(ChildNodes|Feature)|namedItem|c(l(ick|o(se|neNode))|reate(C(omment|DATASection|aption)|T(Head|extNode|Foot)|DocumentFragment|ProcessingInstruction|E(ntityReference|lement)|Attribute))|tabIndex|i(nsert(Row|Before|Cell|Data)|tem)|open|delete(Row|C(ell|aption)|T(Head|Foot)|Data)|focus|write(ln)?|a(dd|ppend(Child|Data))|re(set|place(Child|Data)|move(NamedItem|Child|Attribute(Node)?)?)|get(NamedItem|Element(sBy(Name|TagName)|ById)|Attribute(Node)?)|blur)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\()",
                    "captures": [
                        [
                            "support.function.dom.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "call-expression-method-meta",
                        "function-call-arguments"
                    ]
                },
                {
                    "match": "([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\\s*(?=\\()",
                    "captures": [
                        [
                            "variable.function.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "call-expression-method-meta",
                        "function-call-arguments"
                    ]
                },
                {
                    "match": "(?=[^ ])",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(console)(?:(\\.)(warn|info|log|error|time|timeEnd|assert|count|dir|group|groupCollapsed|groupEnd|profile|profileEnd|table|trace|timeStamp))?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(process)(?:(\\.)(abort|chdir|cwd|disconnect|exit|[sg]ete?[gu]id|send|[sg]etgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime))?(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\.)",
                "\\.",
                "(?:shift|sort|splice|unshift|pop|push|reverse|copyWithin|fill)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\()",
                "(s(ub(stringData|mit)|plitText|e(t(NamedItem|Attribute(Node)?)|lect))|has(ChildNodes|Feature)|namedItem|c(l(ick|o(se|neNode))|reate(C(omment|DATASection|aption)|T(Head|extNode|Foot)|DocumentFragment|ProcessingInstruction|E(ntityReference|lement)|Attribute))|tabIndex|i(nsert(Row|Before|Cell|Data)|tem)|open|delete(Row|C(ell|aption)|T(Head|Foot)|Data)|focus|write(ln)?|a(dd|ppend(Child|Data))|re(set|place(Child|Data)|move(NamedItem|Child|Attribute(Node)?)?)|get(NamedItem|Element(sBy(Name|TagName)|ById)|Attribute(Node)?)|blur)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\()",
                "([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\\s*(?=\\()",
                "(?=[^ ])"
            ]
        },
        "call-expression-meta": {
            "name": "call-expression-meta",
            "meta_scope": [
                "meta.function-call.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(?=\\S)"
            ]
        },
        "call-expression-method-meta": {
            "name": "call-expression-method-meta",
            "meta_scope": [
                "meta.function-call.method.js "
            ],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(?=\\S)"
            ]
        },
        "call-expression-function-name": {
            "name": "call-expression-function-name",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?:clearTimeout|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|isFinite|isNaN|parseFloat|parseInt|setTimeout|super|unescape)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\()",
                    "captures": [
                        [
                            "support.function.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.function.js ",
                            "variable.other.dollar.only.js ",
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.function.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(?:clearTimeout|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|isFinite|isNaN|parseFloat|parseInt|setTimeout|super|unescape)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\()",
                "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=\\S)"
            ]
        },
        "object-property:0": {
            "name": "object-property:0",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "(?:shift|sort|splice|unshift|pop|push|reverse|copyWithin|fill)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\()",
                    "captures": [
                        [
                            "support.function.mutator.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "call-expression-method-meta",
                        "function-call-arguments"
                    ]
                },
                {
                    "match": "(s(ub(stringData|mit)|plitText|e(t(NamedItem|Attribute(Node)?)|lect))|has(ChildNodes|Feature)|namedItem|c(l(ick|o(se|neNode))|reate(C(omment|DATASection|aption)|T(Head|extNode|Foot)|DocumentFragment|ProcessingInstruction|E(ntityReference|lement)|Attribute))|tabIndex|i(nsert(Row|Before|Cell|Data)|tem)|open|delete(Row|C(ell|aption)|T(Head|Foot)|Data)|focus|write(ln)?|a(dd|ppend(Child|Data))|re(set|place(Child|Data)|move(NamedItem|Child|Attribute(Node)?)?)|get(NamedItem|Element(sBy(Name|TagName)|ById)|Attribute(Node)?)|blur)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\()",
                    "captures": [
                        [
                            "support.function.dom.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "call-expression-method-meta",
                        "function-call-arguments"
                    ]
                },
                {
                    "match": "([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\\s*(?=\\()",
                    "captures": [
                        [
                            "variable.function.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "call-expression-method-meta",
                        "function-call-arguments"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "(?:shift|sort|splice|unshift|pop|push|reverse|copyWithin|fill)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\()",
                "(s(ub(stringData|mit)|plitText|e(t(NamedItem|Attribute(Node)?)|lect))|has(ChildNodes|Feature)|namedItem|c(l(ick|o(se|neNode))|reate(C(omment|DATASection|aption)|T(Head|extNode|Foot)|DocumentFragment|ProcessingInstruction|E(ntityReference|lement)|Attribute))|tabIndex|i(nsert(Row|Before|Cell|Data)|tem)|open|delete(Row|C(ell|aption)|T(Head|Foot)|Data)|focus|write(ln)?|a(dd|ppend(Child|Data))|re(set|place(Child|Data)|move(NamedItem|Child|Attribute(Node)?)?)|get(NamedItem|Element(sBy(Name|TagName)|ById)|Attribute(Node)?)|blur)(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])(?=\\()",
                "([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]))\\s*(?=\\()",
                "(?=\\S)"
            ]
        },
        "import-meta-expression-dot:0": {
            "name": "import-meta-expression-dot:0",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "meta(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.import.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?x)(?=\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  \\s* = \\s*\n  (?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)\n)",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "function-initializer",
                        "function-declaration-final-identifier"
                    ]
                },
                {
                    "match": "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                    "captures": [],
                    "pop": true,
                    "push": [
                        "object-property:0"
                    ]
                },
                {
                    "match": "__proto__(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.proto.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "constructor(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.constructor.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "prototype(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "variable.language.prototype.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.property.object.dollar.only.js ",
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.property.object.dollar.js "
                        ],
                        [
                            "punctuation.dollar.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(s(hape|ystemId|c(heme|ope|rolling)|ta(ndby|rt)|ize|ummary|pecified|e(ctionRowIndex|lected(Index)?)|rc)|h(space|t(tpEquiv|mlFor)|e(ight|aders)|ref(lang)?)|n(o(Resize|tation(s|Name)|Shade|Href|de(Name|Type|Value)|Wrap)|extSibling|ame)|c(h(ildNodes|Off|ecked|arset)?|ite|o(ntent|o(kie|rds)|de(Base|Type)?|l(s|Span|or)|mpact)|ell(s|Spacing|Padding)|l(ear|assName)|aption)|t(ype|Bodies|itle|Head|ext|a(rget|gName)|Foot)|i(sMap|ndex|d|m(plementation|ages))|o(ptions|wnerDocument|bject)|d(i(sabled|r)|o(c(type|umentElement)|main)|e(clare|f(er|ault(Selected|Checked|Value)))|at(eTime|a))|useMap|p(ublicId|arentNode|r(o(file|mpt)|eviousSibling))|e(n(ctype|tities)|vent|lements)|v(space|ersion|alue(Type)?|Link|Align)|URL|f(irstChild|orm(s)?|ace|rame(Border)?)|width|l(ink(s)?|o(ngDesc|wSrc)|a(stChild|ng|bel))|a(nchors|c(ce(ssKey|pt(Charset)?)|tion)|ttributes|pplets|l(t|ign)|r(chive|eas)|xis|Link|bbr)|r(ow(s|Span|Index)|ules|e(v|ferrer|l|adOnly))|m(ultiple|e(thod|dia)|a(rgin(Height|Width)|xLength))|b(o(dy|rder)|ackground|gColor))(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "support.constant.dom.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "meta.property.object.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                    "captures": [
                        [
                            "invalid.illegal.illegal-identifier.js "
                        ]
                    ],
                    "pop": "true"
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "meta(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?x)(?=\n  [_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\n  \\s* = \\s*\n  (?:\\s*(async\\s+)?function(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\s*(async\\s*)?([_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])|\\(([^()]|\\([^()]*\\))*\\))\\s*=>)\n)",
                "(?=[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])\\s*\\()",
                "__proto__(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "constructor(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "prototype(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "\\$(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(\\$)[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(s(hape|ystemId|c(heme|ope|rolling)|ta(ndby|rt)|ize|ummary|pecified|e(ctionRowIndex|lected(Index)?)|rc)|h(space|t(tpEquiv|mlFor)|e(ight|aders)|ref(lang)?)|n(o(Resize|tation(s|Name)|Shade|Href|de(Name|Type|Value)|Wrap)|extSibling|ame)|c(h(ildNodes|Off|ecked|arset)?|ite|o(ntent|o(kie|rds)|de(Base|Type)?|l(s|Span|or)|mpact)|ell(s|Spacing|Padding)|l(ear|assName)|aption)|t(ype|Bodies|itle|Head|ext|a(rget|gName)|Foot)|i(sMap|ndex|d|m(plementation|ages))|o(ptions|wnerDocument|bject)|d(i(sabled|r)|o(c(type|umentElement)|main)|e(clare|f(er|ault(Selected|Checked|Value)))|at(eTime|a))|useMap|p(ublicId|arentNode|r(o(file|mpt)|eviousSibling))|e(n(ctype|tities)|vent|lements)|v(space|ersion|alue(Type)?|Link|Align)|URL|f(irstChild|orm(s)?|ace|rame(Border)?)|width|l(ink(s)?|o(ngDesc|wSrc)|a(stChild|ng|bel))|a(nchors|c(ce(ssKey|pt(Charset)?)|tion)|ttributes|pplets|l(t|ign)|r(chive|eas)|xis|Link|bbr)|r(ow(s|Span|Index)|ules|e(v|ferrer|l|adOnly))|m(ultiple|e(thod|dia)|a(rgin(Height|Width)|xLength))|b(o(dy|rder)|ackground|gColor))(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}][_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]*(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "[_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}]+(?![_$\\p{L}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\x{200C}\\x{200D}])",
                "(?=\\S)"
            ]
        },
        "import-meta-expression-dot": {
            "name": "import-meta-expression-dot",
            "meta_scope": [],
            "meta_content_scope": [],
            "rules": [
                {
                    "match": "\\.",
                    "captures": [
                        [
                            "punctuation.accessor.js "
                        ]
                    ],
                    "pop": true,
                    "push": [
                        "import-meta-expression-dot:0"
                    ]
                },
                {
                    "match": "(?=\\S)",
                    "captures": [],
                    "pop": "true"
                }
            ],
            "patterns": [
                "\\.",
                "(?=\\S)"
            ]
        }
    }
}